// language: metal1.1
#include <metal_stdlib>
#include <simd/simd.h>

struct DefaultConstructible {
    template<typename T>
    operator T() && {
        return T {};
    }
};
struct _mslBufferSizes {
    metal::uint size0;
};

struct type_1 {
    metal::atomic_uint inner[10];
};
typedef metal::atomic_uint type_2[1];
struct Globals {
    metal::atomic_uint a;
    type_1 b;
    type_2 c;
};

metal::uint fetch_add_atomic(
    device Globals& globals,
    constant _mslBufferSizes& _buffer_sizes
) {
    metal::uint _e3 = metal::atomic_fetch_add_explicit(&globals.a, 1u, metal::memory_order_relaxed);
    return _e3;
}

metal::uint fetch_add_atomic_static_sized_array(
    int i,
    device Globals& globals,
    constant _mslBufferSizes& _buffer_sizes
) {
    metal::uint _e5 = metal::uint(i) < 10 ? metal::atomic_fetch_add_explicit(&globals.b.inner[i], 1u, metal::memory_order_relaxed) : DefaultConstructible();
    return _e5;
}

metal::uint fetch_add_atomic_dynamic_sized_array(
    int i_1,
    device Globals& globals,
    constant _mslBufferSizes& _buffer_sizes
) {
    metal::uint _e5 = metal::uint(i_1) < 1 + (_buffer_sizes.size0 - 44 - 4) / 4 ? metal::atomic_fetch_add_explicit(&globals.c[i_1], 1u, metal::memory_order_relaxed) : DefaultConstructible();
    return _e5;
}
