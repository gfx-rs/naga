// language: metal2.0
#include <metal_stdlib>
#include <simd/simd.h>

using metal::uint;

struct _mslBufferSizes {
    uint size0;
};

typedef uint type_1[1];
struct PrimeIndices {
    type_1 data;
};

uint collatz_iterations(
    uint n_base
) {
    uint n = {};
    uint i = 0u;
    n = n_base;
    while(true) {
        uint _e5 = n;
        if (_e5 > 1u) {
        } else {
            break;
        }
        uint _e8 = n;
        if ((_e8 % 2u) == 0u) {
            uint _e13 = n;
            n = _e13 / 2u;
        } else {
            uint _e17 = n;
            n = (3u * _e17) + 1u;
        }
        uint _e21 = i;
        i = _e21 + 1u;
    }
    uint _e24 = i;
    return _e24;
}

struct main_Input {
};
kernel void main_(
  metal::uint3 global_id [[thread_position_in_grid]]
, device PrimeIndices& v_indices [[user(fake0)]]
, constant _mslBufferSizes& _buffer_sizes [[user(fake0)]]
) {
    uint _e8 = v_indices.data[global_id.x];
    uint _e9 = collatz_iterations(_e8);
    v_indices.data[global_id.x] = _e9;
    return;
}
