// language: metal1.1
#include <metal_stdlib>
#include <simd/simd.h>

struct Foo {
    metal::float4 a;
    int b;
};
constant metal::float4 v_f32_one = {1.0, 1.0, 1.0, 1.0};
constant metal::float4 v_f32_zero = {0.0, 0.0, 0.0, 0.0};
constant metal::float4 v_f32_half = {0.5, 0.5, 0.5, 0.5};
constant metal::int4 v_i32_one = {1, 1, 1, 1};

metal::float4 builtins(
) {
    int s1 = true ? 1 : 0;
    metal::float4 s2 = true ? v_f32_one : v_f32_zero;
    metal::float4 s3 = metal::select(v_f32_one, v_f32_zero, metal::bool4(false, false, false, false));
    metal::float4 m1 = metal::mix(v_f32_zero, v_f32_one, v_f32_half);
    metal::float4 m2 = metal::mix(v_f32_zero, v_f32_one, 0.10000000149011612);
    float b1 = as_type<float>(v_i32_one.x);
    metal::float4 b2 = as_type<metal::float4>(v_i32_one);
    metal::int4 v_i32_zero = static_cast<metal::int4>(v_f32_zero);
    return ((((static_cast<metal::float4>(metal::int4(s1) + v_i32_zero) + s2) + m1) + m2) + metal::float4(b1)) + b2;
}

metal::float4 splat(
) {
    metal::float2 a = ((metal::float2(1.0) + metal::float2(2.0)) - metal::float2(3.0)) / metal::float2(4.0);
    metal::int4 b = metal::int4(5) % metal::int4(2);
    return a.xyxy + static_cast<metal::float4>(b);
}

int unary(
) {
    if (!true) {
        return 1;
    } else {
        return !1;
    }
}

metal::float3 bool_cast(
    metal::float3 x
) {
    metal::bool3 y = static_cast<metal::bool3>(x);
    return static_cast<metal::float3>(y);
}

float constructors(
) {
    Foo foo;
    foo = Foo {metal::float4(1.0), 1};
    float _e11 = foo.a.x;
    return _e11;
}

void modulo(
) {
    int a1 = 1 % 1;
    float b1 = metal::fmod(1.0, 1.0);
    metal::int3 c = metal::int3(1) % metal::int3(1);
    metal::float3 d = metal::fmod(metal::float3(1.0), metal::float3(1.0));
}

kernel void main1(
) {
    metal::float4 _e4 = builtins();
    metal::float4 _e5 = splat();
    int _e6 = unary();
    metal::float3 _e8 = bool_cast(v_f32_one.xyz);
    float _e9 = constructors();
    modulo();
    return;
}
