// language: metal2.0
#include <metal_stdlib>
#include <simd/simd.h>

using metal::uint;

struct Foo {
    metal::float4 a;
    int b;
};
struct type_12 {
    Foo inner[3];
};
struct type_13 {
    int inner[4u];
};
constant metal::float4 v_f32_one = {1.0, 1.0, 1.0, 1.0};
constant metal::float4 v_f32_zero = {0.0, 0.0, 0.0, 0.0};
constant metal::float4 v_f32_half = {0.5, 0.5, 0.5, 0.5};
constant metal::int4 v_i32_one = {1, 1, 1, 1};
constant metal::uint2 const_type_11_ = {0u, 0u};
constant metal::float2 const_type_6_ = {0.0, 0.0};
constant metal::float2x2 const_type_7_ = {const_type_6_, const_type_6_};
constant metal::float4 const_type = {0.0, 0.0, 0.0, 0.0};
constant Foo const_Foo = {const_type, 0};
constant type_12 const_type_12_ = {const_Foo, const_Foo, const_Foo};

metal::float4 builtins(
) {
    int s1_ = true ? 1 : 0;
    metal::float4 s2_ = true ? v_f32_one : v_f32_zero;
    metal::float4 s3_ = metal::select(v_f32_one, v_f32_zero, metal::bool4(false, false, false, false));
    metal::float4 m1_ = metal::mix(v_f32_zero, v_f32_one, v_f32_half);
    metal::float4 m2_ = metal::mix(v_f32_zero, v_f32_one, 0.10000000149011612);
    float b1_ = as_type<float>(v_i32_one.x);
    metal::float4 b2_ = as_type<metal::float4>(v_i32_one);
    metal::int4 v_i32_zero = static_cast<metal::int4>(v_f32_zero);
    return ((((static_cast<metal::float4>(metal::int4(s1_) + v_i32_zero) + s2_) + m1_) + m2_) + metal::float4(b1_)) + b2_;
}

metal::float4 splat(
) {
    metal::float2 a_1 = ((metal::float2(1.0) + metal::float2(2.0)) - metal::float2(3.0)) / metal::float2(4.0);
    metal::int4 b = metal::int4(5) % metal::int4(2);
    return a_1.xyxy + static_cast<metal::float4>(b);
}

int unary(
) {
    if (!true) {
        return 1;
    } else {
        return ~1;
    }
}

metal::float3 bool_cast(
    metal::float3 x
) {
    metal::bool3 y = static_cast<metal::bool3>(x);
    return static_cast<metal::float3>(y);
}

float constructors(
) {
    Foo foo;
    bool unnamed = false;
    int unnamed_1 = 0;
    uint unnamed_2 = 0u;
    float unnamed_3 = 0.0;
    metal::uint2 unnamed_4 = const_type_11_;
    metal::float2x2 unnamed_5 = const_type_7_;
    type_12 unnamed_6 = const_type_12_;
    Foo unnamed_7 = const_Foo;
    metal::uint2 unnamed_8;
    metal::float2x2 unnamed_9;
    type_13 unnamed_10;
    foo = Foo {metal::float4(1.0), 1};
    metal::float2x2 mat2comp = metal::float2x2(metal::float2(1.0, 0.0), metal::float2(0.0, 1.0));
    metal::float4x4 mat4comp = metal::float4x4(metal::float4(1.0, 0.0, 0.0, 0.0), metal::float4(0.0, 1.0, 0.0, 0.0), metal::float4(0.0, 0.0, 1.0, 0.0), metal::float4(0.0, 0.0, 0.0, 1.0));
    unnamed_8 = metal::uint2(0u);
    unnamed_9 = metal::float2x2(metal::float2(0.0), metal::float2(0.0));
    for(int _i=0; _i<4; ++_i) unnamed_10.inner[_i] = type_13 {0, 1, 2, 3}.inner[_i];
    float _e70 = foo.a.x;
    return _e70;
}

void modulo(
) {
    int a_2 = 1 % 1;
    float b_1 = metal::fmod(1.0, 1.0);
    metal::int3 c = metal::int3(1) % metal::int3(1);
    metal::float3 d = metal::fmod(metal::float3(1.0), metal::float3(1.0));
}

void scalar_times_matrix(
) {
    metal::float4x4 model = metal::float4x4(metal::float4(1.0, 0.0, 0.0, 0.0), metal::float4(0.0, 1.0, 0.0, 0.0), metal::float4(0.0, 0.0, 1.0, 0.0), metal::float4(0.0, 0.0, 0.0, 1.0));
    metal::float4x4 assertion = 2.0 * model;
}

void logical(
) {
    bool a_3 = true | false;
    bool b_2 = true & false;
}

void binary_assignment(
) {
    int a = 1;
    int _e6 = a;
    a = _e6 + 1;
    int _e9 = a;
    a = _e9 - 1;
    int _e12 = a;
    int _e13 = a;
    a = _e12 * _e13;
    int _e15 = a;
    int _e16 = a;
    a = _e15 / _e16;
    int _e18 = a;
    a = _e18 % 1;
    int _e21 = a;
    a = _e21 ^ 0;
    int _e24 = a;
    a = _e24 & 0;
    int _e27 = a;
    a = _e27 + 1;
    int _e30 = a;
    a = _e30 - 1;
    return;
}

kernel void main_(
) {
    metal::float4 _e4 = builtins();
    metal::float4 _e5 = splat();
    int _e6 = unary();
    metal::float3 _e8 = bool_cast(v_f32_one.xyz);
    float _e9 = constructors();
    modulo();
    scalar_times_matrix();
    logical();
    binary_assignment();
    return;
}
