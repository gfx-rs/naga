// language: metal2.0
#include <metal_stdlib>
#include <simd/simd.h>

using metal::uint;

constant metal::int2 const_type_9_ = {3, 1};

struct main_Input {
};
kernel void main_(
  metal::uint3 local_id [[thread_position_in_threadgroup]]
, metal::texture2d<uint, metal::access::sample> image_mipmapped_src [[user(fake0)]]
, metal::texture2d_ms<uint, metal::access::read> image_multisampled_src [[user(fake0)]]
, metal::texture2d<uint, metal::access::read> image_storage_src [[user(fake0)]]
, metal::texture2d_array<uint, metal::access::sample> image_array_src [[user(fake0)]]
, metal::texture1d<uint, metal::access::sample> image_1d_src [[user(fake0)]]
, metal::texture1d<uint, metal::access::write> image_dst [[user(fake0)]]
) {
    metal::int2 dim = metal::int2(image_storage_src.get_width(), image_storage_src.get_height());
    metal::int2 itc = (dim * static_cast<metal::int2>(local_id.xy)) % metal::int2(10, 20);
    metal::uint4 value1_ = image_mipmapped_src.read(metal::uint2(itc), static_cast<int>(local_id.z));
    metal::uint4 value2_ = image_multisampled_src.read(metal::uint2(itc), static_cast<int>(local_id.z));
    metal::uint4 value4_ = image_storage_src.read(metal::uint2(itc));
    metal::uint4 value5_ = image_array_src.read(metal::uint2(itc), static_cast<int>(local_id.z), static_cast<int>(local_id.z) + 1);
    metal::uint4 value6_ = image_1d_src.read(uint(static_cast<int>(local_id.x)));
    image_dst.write((((value1_ + value2_) + value4_) + value5_) + value6_, uint(itc.x));
    return;
}


struct depth_loadInput {
};
kernel void depth_load(
  metal::uint3 local_id_1 [[thread_position_in_threadgroup]]
, metal::depth2d_ms<float, metal::access::read> image_depth_multisampled_src [[user(fake0)]]
, metal::texture2d<uint, metal::access::read> image_storage_src [[user(fake0)]]
, metal::texture1d<uint, metal::access::write> image_dst [[user(fake0)]]
) {
    metal::int2 dim_1 = metal::int2(image_storage_src.get_width(), image_storage_src.get_height());
    metal::int2 itc_1 = (dim_1 * static_cast<metal::int2>(local_id_1.xy)) % metal::int2(10, 20);
    float val = image_depth_multisampled_src.read(metal::uint2(itc_1), static_cast<int>(local_id_1.z));
    image_dst.write(metal::uint4(static_cast<uint>(val)), uint(itc_1.x));
    return;
}


struct queriesOutput {
    metal::float4 member_2 [[position]];
};
vertex queriesOutput queries(
  metal::texture1d<float, metal::access::sample> image_1d [[user(fake0)]]
, metal::texture2d<float, metal::access::sample> image_2d [[user(fake0)]]
, metal::texture2d_array<float, metal::access::sample> image_2d_array [[user(fake0)]]
, metal::texturecube<float, metal::access::sample> image_cube [[user(fake0)]]
, metal::texturecube_array<float, metal::access::sample> image_cube_array [[user(fake0)]]
, metal::texture3d<float, metal::access::sample> image_3d [[user(fake0)]]
, metal::texture2d_ms<float, metal::access::read> image_aa [[user(fake0)]]
) {
    int dim_1d = int(image_1d.get_width());
    int dim_1d_lod = int(image_1d.get_width());
    metal::int2 dim_2d = metal::int2(image_2d.get_width(), image_2d.get_height());
    metal::int2 dim_2d_lod = metal::int2(image_2d.get_width(1), image_2d.get_height(1));
    metal::int2 dim_2d_array = metal::int2(image_2d_array.get_width(), image_2d_array.get_height());
    metal::int2 dim_2d_array_lod = metal::int2(image_2d_array.get_width(1), image_2d_array.get_height(1));
    metal::int2 dim_cube = metal::int2(image_cube.get_width());
    metal::int2 dim_cube_lod = metal::int2(image_cube.get_width(1));
    metal::int2 dim_cube_array = metal::int2(image_cube_array.get_width());
    metal::int2 dim_cube_array_lod = metal::int2(image_cube_array.get_width(1));
    metal::int3 dim_3d = metal::int3(image_3d.get_width(), image_3d.get_height(), image_3d.get_depth());
    metal::int3 dim_3d_lod = metal::int3(image_3d.get_width(1), image_3d.get_height(1), image_3d.get_depth(1));
    metal::int2 dim_2s_ms = metal::int2(image_aa.get_width(), image_aa.get_height());
    int sum = (((((((((dim_1d + dim_2d.y) + dim_2d_lod.y) + dim_2d_array.y) + dim_2d_array_lod.y) + dim_cube.y) + dim_cube_lod.y) + dim_cube_array.y) + dim_cube_array_lod.y) + dim_3d.z) + dim_3d_lod.z;
    return queriesOutput { metal::float4(static_cast<float>(sum)) };
}


struct levels_queriesOutput {
    metal::float4 member_3 [[position]];
};
vertex levels_queriesOutput levels_queries(
  metal::texture2d<float, metal::access::sample> image_2d [[user(fake0)]]
, metal::texture2d_array<float, metal::access::sample> image_2d_array [[user(fake0)]]
, metal::texturecube<float, metal::access::sample> image_cube [[user(fake0)]]
, metal::texturecube_array<float, metal::access::sample> image_cube_array [[user(fake0)]]
, metal::texture3d<float, metal::access::sample> image_3d [[user(fake0)]]
, metal::texture2d_ms<float, metal::access::read> image_aa [[user(fake0)]]
) {
    int num_levels_2d = int(image_2d.get_num_mip_levels());
    int num_levels_2d_array = int(image_2d_array.get_num_mip_levels());
    int num_layers_2d = int(image_2d_array.get_array_size());
    int num_levels_cube = int(image_cube.get_num_mip_levels());
    int num_levels_cube_array = int(image_cube_array.get_num_mip_levels());
    int num_layers_cube = int(image_cube_array.get_array_size());
    int num_levels_3d = int(image_3d.get_num_mip_levels());
    int num_samples_aa = int(image_aa.get_num_samples());
    int sum_1 = ((((((num_layers_2d + num_layers_cube) + num_samples_aa) + num_levels_2d) + num_levels_2d_array) + num_levels_3d) + num_levels_cube) + num_levels_cube_array;
    return levels_queriesOutput { metal::float4(static_cast<float>(sum_1)) };
}


struct texture_sampleOutput {
    metal::float4 member_4 [[color(0)]];
};
fragment texture_sampleOutput texture_sample(
  metal::texture1d<float, metal::access::sample> image_1d [[user(fake0)]]
, metal::texture2d<float, metal::access::sample> image_2d [[user(fake0)]]
, metal::sampler sampler_reg [[user(fake0)]]
) {
    metal::float2 tc = metal::float2(0.5);
    metal::float4 s1d = image_1d.sample(sampler_reg, tc.x);
    metal::float4 s2d = image_2d.sample(sampler_reg, tc);
    metal::float4 s2d_offset = image_2d.sample(sampler_reg, tc, const_type_9_);
    metal::float4 s2d_level = image_2d.sample(sampler_reg, tc, metal::level(2.299999952316284));
    metal::float4 s2d_level_offset = image_2d.sample(sampler_reg, tc, metal::level(2.299999952316284), const_type_9_);
    metal::float4 s2d_bias_offset = image_2d.sample(sampler_reg, tc, metal::bias(2.0), const_type_9_);
    return texture_sampleOutput { (((s1d + s2d) + s2d_offset) + s2d_level) + s2d_level_offset };
}


struct texture_sample_comparisonOutput {
    float member_5 [[color(0)]];
};
fragment texture_sample_comparisonOutput texture_sample_comparison(
  metal::sampler sampler_cmp [[user(fake0)]]
, metal::depth2d<float, metal::access::sample> image_2d_depth [[user(fake0)]]
, metal::depthcube<float, metal::access::sample> image_cube_depth [[user(fake0)]]
) {
    metal::float2 tc_1 = metal::float2(0.5);
    float s2d_depth = image_2d_depth.sample_compare(sampler_cmp, tc_1, 0.5);
    float s2d_depth_level = image_2d_depth.sample_compare(sampler_cmp, tc_1, 0.5);
    float scube_depth_level = image_cube_depth.sample_compare(sampler_cmp, metal::float3(0.5), 0.5);
    return texture_sample_comparisonOutput { s2d_depth + s2d_depth_level };
}


struct gatherOutput {
    metal::float4 member_6 [[color(0)]];
};
fragment gatherOutput gather(
  metal::texture2d<float, metal::access::sample> image_2d [[user(fake0)]]
, metal::sampler sampler_reg [[user(fake0)]]
, metal::sampler sampler_cmp [[user(fake0)]]
, metal::depth2d<float, metal::access::sample> image_2d_depth [[user(fake0)]]
) {
    metal::float2 tc_2 = metal::float2(0.5);
    metal::float4 s2d_1 = image_2d.gather(sampler_reg, tc_2, int2(0), metal::component::y);
    metal::float4 s2d_offset_1 = image_2d.gather(sampler_reg, tc_2, const_type_9_, metal::component::w);
    metal::float4 s2d_depth_1 = image_2d_depth.gather_compare(sampler_cmp, tc_2, 0.5);
    metal::float4 s2d_depth_offset = image_2d_depth.gather_compare(sampler_cmp, tc_2, 0.5, const_type_9_);
    return gatherOutput { ((s2d_1 + s2d_offset_1) + s2d_depth_1) + s2d_depth_offset };
}


struct depth_no_comparisonOutput {
    metal::float4 member_7 [[color(0)]];
};
fragment depth_no_comparisonOutput depth_no_comparison(
  metal::sampler sampler_reg [[user(fake0)]]
, metal::depth2d<float, metal::access::sample> image_2d_depth [[user(fake0)]]
) {
    metal::float2 tc_3 = metal::float2(0.5);
    float s2d_2 = image_2d_depth.sample(sampler_reg, tc_3);
    metal::float4 s2d_gather = image_2d_depth.gather(sampler_reg, tc_3);
    return depth_no_comparisonOutput { metal::float4(s2d_2) + s2d_gather };
}
