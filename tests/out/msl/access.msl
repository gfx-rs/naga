// language: metal2.0
#include <metal_stdlib>
#include <simd/simd.h>

struct _mslBufferSizes {
    metal::uint size0;
};

struct type2 {
    metal::uint2 inner[2];
};
typedef int type4[1];
struct Bar {
    metal::float4x4 matrix;
    type2 arr;
    type4 data;
};
struct type8 {
    int inner[5];
};

struct fooInput {
};
struct fooOutput {
    metal::float4 member [[position]];
};
vertex fooOutput foo(
  metal::uint vi [[vertex_id]]
, device Bar& bar [[buffer(0)]]
, constant _mslBufferSizes& _buffer_sizes [[buffer(24)]]
) {
    float foo1 = 0.0;
    type8 c;
    float baz = foo1;
    foo1 = 1.0;
    metal::float4x4 matrix = bar.matrix;
    type2 arr = bar.arr;
    metal::float4 _e13 = bar.matrix[3];
    float b = _e13.x;
    int a = bar.data[(1 + (_buffer_sizes.size0 - 80 - 4) / 4) - 2u];
    bar.matrix[1].z = 1.0;
    bar.matrix = metal::float4x4(metal::float4(0.0), metal::float4(1.0), metal::float4(2.0), metal::float4(3.0));
    for(int _i=0; _i<2; ++_i) bar.arr.inner[_i] = type2 {metal::uint2(0u), metal::uint2(1u)}.inner[_i];
    for(int _i=0; _i<5; ++_i) c.inner[_i] = type8 {a, static_cast<int>(b), 3, 4, 5}.inner[_i];
    c.inner[vi + 1u] = 42;
    int value = c.inner[vi];
    return fooOutput { matrix * static_cast<float4>(metal::int4(value)) };
}
