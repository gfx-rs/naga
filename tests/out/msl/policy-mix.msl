// language: metal2.0
#include <metal_stdlib>
#include <simd/simd.h>

using metal::uint;

struct DefaultConstructible {
    template<typename T>
    operator T() && {
        return T {};
    }
};
typedef metal::float4 vec4f32_;
struct arrayvec4f3210_ {
    vec4f32_ inner[10u];
};
struct InStorage {
    arrayvec4f3210_ a;
};
struct arrayvec4f3220_ {
    vec4f32_ inner[20u];
};
struct InUniform {
    arrayvec4f3220_ a;
};
typedef float f32_;
struct arrayf3230_ {
    f32_ inner[30u];
};
struct arrayf3240_ {
    f32_ inner[40u];
};
typedef metal::int2 vec2i32_;
typedef int i32_;
struct arrayvec4f322_ {
    vec4f32_ inner[2u];
};
typedef device InStorage& ptrstorageInStorage;
typedef device arrayvec4f3210_& ptrstoragearrayvec4f3210_;
typedef constant InUniform& ptruniformInUniform;
typedef constant arrayvec4f3220_& ptruniformarrayvec4f3220_;
typedef threadgroup arrayf3230_& ptrworkgrouparrayf3230_;
typedef thread arrayf3240_& ptrprivatearrayf3240_;
typedef thread arrayvec4f322_& ptrfunctionarrayvec4f322_;

vec4f32_ mock_function(
    vec2i32_ c,
    i32_ i,
    i32_ l,
    device InStorage const& in_storage,
    constant InUniform& in_uniform,
    metal::texture2d_array<float, metal::access::sample> image_2d_array,
    threadgroup arrayf3230_& in_workgroup,
    thread arrayf3240_& in_private
) {
    arrayvec4f322_ in_function = {};
    arrayvec4f322_ in_function_1 = arrayvec4f322_ {metal::float4(0.707, 0.0, 0.0, 1.0), metal::float4(0.0, 0.707, 0.0, 1.0)};
    for(int _i=0; _i<2; ++_i) in_function.inner[_i] = in_function_1.inner[_i];
    vec4f32_ _e16 = in_storage.a.inner[i];
    vec4f32_ _e21 = in_uniform.a.inner[i];
    metal::float4 _e27 = (uint(l) < image_2d_array.get_num_mip_levels() && uint(i) < image_2d_array.get_array_size() && metal::all(metal::uint2(c) < metal::uint2(image_2d_array.get_width(l), image_2d_array.get_height(l))) ? image_2d_array.read(metal::uint2(c), i, l): DefaultConstructible());
    f32_ _e32 = in_workgroup.inner[metal::min(unsigned(i), 29u)];
    f32_ _e38 = in_private.inner[metal::min(unsigned(i), 39u)];
    vec4f32_ _e44 = in_function.inner[metal::min(unsigned(i), 1u)];
    return ((((_e16 + _e21) + _e27) + metal::float4(_e32)) + metal::float4(_e38)) + _e44;
}
