// language: metal2.0
#include <metal_stdlib>
#include <simd/simd.h>

using metal::uint;

typedef metal::float3 vec3f32_;
struct S {
    vec3f32_ a;
};
typedef float f32_;
struct Test {
    S a;
    f32_ b;
};
struct arrayvec3f322_ {
    vec3f32_ inner[2u];
};
struct Test2_ {
    arrayvec3f322_ a;
    f32_ b;
};
typedef metal::float4x3 mat4x3f32_;
struct Test3_ {
    mat4x3f32_ a;
    f32_ b;
};
typedef metal::float4 vec4f32_;
typedef constant Test& ptruniformTest;
typedef constant Test2_& ptruniformTest2_;
typedef constant Test3_& ptruniformTest3_;

struct vertex_Output {
    metal::float4 member [[position]];
};
vertex vertex_Output vertex_(
  constant Test& input1_ [[buffer(0)]]
, constant Test2_& input2_ [[buffer(1)]]
, constant Test3_& input3_ [[buffer(2)]]
) {
    f32_ _e4 = input1_.b;
    f32_ _e8 = input2_.b;
    f32_ _e12 = input3_.b;
    return vertex_Output { ((metal::float4(1.0) * _e4) * _e8) * _e12 };
}
