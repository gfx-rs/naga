// language: metal2.0
#include <metal_stdlib>
#include <simd/simd.h>

using metal::uint;

struct DefaultConstructible {
    template<typename T>
    operator T() && {
        return T {};
    }
};
struct UniformIndex {
    uint index;
};
struct FragmentIn {
    uint index;
};

struct main_Input {
    uint index [[user(loc0), flat]];
};
struct main_Output {
    metal::float4 member [[color(0)]];
};
fragment main_Output main_(
  main_Input varyings [[stage_in]]
, metal::array<metal::texture2d<float, metal::access::sample>, 10> texture_array_unbounded [[texture(0)]]
, metal::array<metal::texture2d<float, metal::access::sample>, 5> texture_array_bounded [[user(fake0)]]
, metal::array<metal::texture2d_array<float, metal::access::sample>, 5> texture_array_2darray [[user(fake0)]]
, metal::array<metal::texture2d_ms<float, metal::access::read>, 5> texture_array_multisampled [[user(fake0)]]
, metal::array<metal::depth2d<float, metal::access::sample>, 5> texture_array_depth [[user(fake0)]]
, metal::array<metal::texture2d<float, metal::access::write>, 5> texture_array_storage [[user(fake0)]]
, metal::array<metal::sampler, 5> samp [[user(fake0)]]
, metal::array<metal::sampler, 5> samp_comp [[user(fake0)]]
, constant UniformIndex& uni [[user(fake0)]]
) {
    const FragmentIn fragment_in = { varyings.index };
    uint u1_ = {};
    metal::uint2 u2_ = {};
    float v1_ = {};
    metal::float4 v4_ = {};
    uint uniform_index = uni.index;
    uint non_uniform_index = fragment_in.index;
    u1_ = 0u;
    u2_ = metal::uint2(0u);
    v1_ = 0.0;
    v4_ = metal::float4(0.0);
    metal::float2 uv = metal::float2(0.0);
    metal::int2 pix = metal::int2(0);
    metal::uint2 _e23 = u2_;
    u2_ = _e23 + metal::uint2(texture_array_unbounded[0].get_width(), texture_array_unbounded[0].get_height());
    metal::uint2 _e28 = u2_;
    u2_ = _e28 + metal::uint2(texture_array_unbounded[uniform_index].get_width(), texture_array_unbounded[uniform_index].get_height());
    metal::uint2 _e33 = u2_;
    u2_ = _e33 + metal::uint2(texture_array_unbounded[non_uniform_index].get_width(), texture_array_unbounded[non_uniform_index].get_height());
    metal::float4 _e41 = texture_array_bounded[0].gather(samp[0], uv);
    metal::float4 _e42 = v4_;
    v4_ = _e42 + _e41;
    metal::float4 _e48 = texture_array_bounded[uniform_index].gather(samp[uniform_index], uv);
    metal::float4 _e49 = v4_;
    v4_ = _e49 + _e48;
    metal::float4 _e55 = texture_array_bounded[non_uniform_index].gather(samp[non_uniform_index], uv);
    metal::float4 _e56 = v4_;
    v4_ = _e56 + _e55;
    metal::float4 _e65 = texture_array_depth[0].gather_compare(samp_comp[0], uv, 0.0);
    metal::float4 _e66 = v4_;
    v4_ = _e66 + _e65;
    metal::float4 _e73 = texture_array_depth[uniform_index].gather_compare(samp_comp[uniform_index], uv, 0.0);
    metal::float4 _e74 = v4_;
    v4_ = _e74 + _e73;
    metal::float4 _e81 = texture_array_depth[non_uniform_index].gather_compare(samp_comp[non_uniform_index], uv, 0.0);
    metal::float4 _e82 = v4_;
    v4_ = _e82 + _e81;
    metal::float4 _e88 = (uint(0) < texture_array_unbounded[0].get_num_mip_levels() && metal::all(metal::uint2(pix) < metal::uint2(texture_array_unbounded[0].get_width(0), texture_array_unbounded[0].get_height(0))) ? texture_array_unbounded[0].read(metal::uint2(pix), 0): DefaultConstructible());
    metal::float4 _e89 = v4_;
    v4_ = _e89 + _e88;
    metal::float4 _e94 = (uint(0) < texture_array_unbounded[uniform_index].get_num_mip_levels() && metal::all(metal::uint2(pix) < metal::uint2(texture_array_unbounded[uniform_index].get_width(0), texture_array_unbounded[uniform_index].get_height(0))) ? texture_array_unbounded[uniform_index].read(metal::uint2(pix), 0): DefaultConstructible());
    metal::float4 _e95 = v4_;
    v4_ = _e95 + _e94;
    metal::float4 _e100 = (uint(0) < texture_array_unbounded[non_uniform_index].get_num_mip_levels() && metal::all(metal::uint2(pix) < metal::uint2(texture_array_unbounded[non_uniform_index].get_width(0), texture_array_unbounded[non_uniform_index].get_height(0))) ? texture_array_unbounded[non_uniform_index].read(metal::uint2(pix), 0): DefaultConstructible());
    metal::float4 _e101 = v4_;
    v4_ = _e101 + _e100;
    uint _e107 = u1_;
    u1_ = _e107 + texture_array_2darray[0].get_array_size();
    uint _e112 = u1_;
    u1_ = _e112 + texture_array_2darray[uniform_index].get_array_size();
    uint _e117 = u1_;
    u1_ = _e117 + texture_array_2darray[non_uniform_index].get_array_size();
    uint _e123 = u1_;
    u1_ = _e123 + texture_array_bounded[0].get_num_mip_levels();
    uint _e128 = u1_;
    u1_ = _e128 + texture_array_bounded[uniform_index].get_num_mip_levels();
    uint _e133 = u1_;
    u1_ = _e133 + texture_array_bounded[non_uniform_index].get_num_mip_levels();
    uint _e139 = u1_;
    u1_ = _e139 + texture_array_multisampled[0].get_num_samples();
    uint _e144 = u1_;
    u1_ = _e144 + texture_array_multisampled[uniform_index].get_num_samples();
    uint _e149 = u1_;
    u1_ = _e149 + texture_array_multisampled[non_uniform_index].get_num_samples();
    metal::float4 _e157 = texture_array_bounded[0].sample(samp[0], uv);
    metal::float4 _e158 = v4_;
    v4_ = _e158 + _e157;
    metal::float4 _e164 = texture_array_bounded[uniform_index].sample(samp[uniform_index], uv);
    metal::float4 _e165 = v4_;
    v4_ = _e165 + _e164;
    metal::float4 _e171 = texture_array_bounded[non_uniform_index].sample(samp[non_uniform_index], uv);
    metal::float4 _e172 = v4_;
    v4_ = _e172 + _e171;
    metal::float4 _e181 = texture_array_bounded[0].sample(samp[0], uv, metal::bias(0.0));
    metal::float4 _e182 = v4_;
    v4_ = _e182 + _e181;
    metal::float4 _e189 = texture_array_bounded[uniform_index].sample(samp[uniform_index], uv, metal::bias(0.0));
    metal::float4 _e190 = v4_;
    v4_ = _e190 + _e189;
    metal::float4 _e197 = texture_array_bounded[non_uniform_index].sample(samp[non_uniform_index], uv, metal::bias(0.0));
    metal::float4 _e198 = v4_;
    v4_ = _e198 + _e197;
    float _e207 = texture_array_depth[0].sample_compare(samp_comp[0], uv, 0.0);
    float _e208 = v1_;
    v1_ = _e208 + _e207;
    float _e215 = texture_array_depth[uniform_index].sample_compare(samp_comp[uniform_index], uv, 0.0);
    float _e216 = v1_;
    v1_ = _e216 + _e215;
    float _e223 = texture_array_depth[non_uniform_index].sample_compare(samp_comp[non_uniform_index], uv, 0.0);
    float _e224 = v1_;
    v1_ = _e224 + _e223;
    float _e233 = texture_array_depth[0].sample_compare(samp_comp[0], uv, 0.0);
    float _e234 = v1_;
    v1_ = _e234 + _e233;
    float _e241 = texture_array_depth[uniform_index].sample_compare(samp_comp[uniform_index], uv, 0.0);
    float _e242 = v1_;
    v1_ = _e242 + _e241;
    float _e249 = texture_array_depth[non_uniform_index].sample_compare(samp_comp[non_uniform_index], uv, 0.0);
    float _e250 = v1_;
    v1_ = _e250 + _e249;
    metal::float4 _e258 = texture_array_bounded[0].sample(samp[0], uv, metal::gradient2d(uv, uv));
    metal::float4 _e259 = v4_;
    v4_ = _e259 + _e258;
    metal::float4 _e265 = texture_array_bounded[uniform_index].sample(samp[uniform_index], uv, metal::gradient2d(uv, uv));
    metal::float4 _e266 = v4_;
    v4_ = _e266 + _e265;
    metal::float4 _e272 = texture_array_bounded[non_uniform_index].sample(samp[non_uniform_index], uv, metal::gradient2d(uv, uv));
    metal::float4 _e273 = v4_;
    v4_ = _e273 + _e272;
    metal::float4 _e282 = texture_array_bounded[0].sample(samp[0], uv, metal::level(0.0));
    metal::float4 _e283 = v4_;
    v4_ = _e283 + _e282;
    metal::float4 _e290 = texture_array_bounded[uniform_index].sample(samp[uniform_index], uv, metal::level(0.0));
    metal::float4 _e291 = v4_;
    v4_ = _e291 + _e290;
    metal::float4 _e298 = texture_array_bounded[non_uniform_index].sample(samp[non_uniform_index], uv, metal::level(0.0));
    metal::float4 _e299 = v4_;
    v4_ = _e299 + _e298;
    metal::float4 _e304 = v4_;
    if (metal::all(metal::uint2(pix) < metal::uint2(texture_array_storage[0].get_width(), texture_array_storage[0].get_height()))) {
        texture_array_storage[0].write(_e304, metal::uint2(pix));
    }
    metal::float4 _e307 = v4_;
    if (metal::all(metal::uint2(pix) < metal::uint2(texture_array_storage[uniform_index].get_width(), texture_array_storage[uniform_index].get_height()))) {
        texture_array_storage[uniform_index].write(_e307, metal::uint2(pix));
    }
    metal::float4 _e310 = v4_;
    if (metal::all(metal::uint2(pix) < metal::uint2(texture_array_storage[non_uniform_index].get_width(), texture_array_storage[non_uniform_index].get_height()))) {
        texture_array_storage[non_uniform_index].write(_e310, metal::uint2(pix));
    }
    metal::uint2 _e311 = u2_;
    uint _e312 = u1_;
    metal::float2 v2_ = static_cast<metal::float2>(_e311 + metal::uint2(_e312));
    metal::float4 _e316 = v4_;
    float _e323 = v1_;
    return main_Output { (_e316 + metal::float4(v2_.x, v2_.y, v2_.x, v2_.y)) + metal::float4(_e323) };
}
