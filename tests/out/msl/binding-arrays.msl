// language: metal2.0
#include <metal_stdlib>
#include <simd/simd.h>

using metal::uint;
struct DefaultConstructible {
    template<typename T>
    operator T() && {
        return T {};
    }
};

struct UniformIndex {
    uint index;
};
struct FragmentIn {
    uint index;
};

struct main_Input {
    uint index [[user(loc0), flat]];
};
struct main_Output {
    metal::float4 member [[color(0)]];
};
fragment main_Output main_(
  main_Input varyings [[stage_in]]
, metal::array<metal::texture2d<float, metal::access::sample>, 10> texture_array_unbounded [[texture(0)]]
, metal::array<metal::texture2d<float, metal::access::sample>, 5> texture_array_bounded [[user(fake0)]]
, metal::array<metal::texture2d_array<float, metal::access::sample>, 5> texture_array_2darray [[user(fake0)]]
, metal::array<metal::texture2d_ms<float, metal::access::read>, 5> texture_array_multisampled [[user(fake0)]]
, metal::array<metal::depth2d<float, metal::access::sample>, 5> texture_array_depth [[user(fake0)]]
, metal::array<metal::texture2d<float, metal::access::write>, 5> texture_array_storage [[user(fake0)]]
, metal::array<metal::sampler, 5> samp [[user(fake0)]]
, metal::array<metal::sampler, 5> samp_comp [[user(fake0)]]
, constant UniformIndex& uni [[user(fake0)]]
) {
    const FragmentIn fragment_in = { varyings.index };
    uint u1_ = {};
    metal::uint2 u2_ = {};
    float v1_ = {};
    metal::float4 v4_ = {};
    uint uniform_index = uni.index;
    uint non_uniform_index = fragment_in.index;
    u1_ = 0u;
    u2_ = metal::uint2(0u);
    v1_ = 0.0;
    v4_ = metal::float4(0.0);
    metal::float2 uv = metal::float2(0.0);
    metal::int2 pix = metal::int2(0);
    metal::uint2 _e23 = u2_;
    u2_ = _e23 + metal::uint2(texture_array_unbounded[0].get_width(), texture_array_unbounded[0].get_height());
    metal::uint2 _e28 = u2_;
    u2_ = _e28 + metal::uint2(texture_array_unbounded[uniform_index].get_width(), texture_array_unbounded[uniform_index].get_height());
    metal::uint2 _e33 = u2_;
    u2_ = _e33 + metal::uint2(texture_array_unbounded[non_uniform_index].get_width(), texture_array_unbounded[non_uniform_index].get_height());
    metal::float4 _e42 = texture_array_bounded[0].gather(samp[0], uv);
    metal::float4 _e43 = v4_;
    v4_ = _e43 + _e42;
    metal::float4 _e50 = texture_array_bounded[uniform_index].gather(samp[uniform_index], uv);
    metal::float4 _e51 = v4_;
    v4_ = _e51 + _e50;
    metal::float4 _e58 = texture_array_bounded[non_uniform_index].gather(samp[non_uniform_index], uv);
    metal::float4 _e59 = v4_;
    v4_ = _e59 + _e58;
    metal::float4 _e68 = texture_array_depth[0].gather_compare(samp_comp[0], uv, 0.0);
    metal::float4 _e69 = v4_;
    v4_ = _e69 + _e68;
    metal::float4 _e76 = texture_array_depth[uniform_index].gather_compare(samp_comp[uniform_index], uv, 0.0);
    metal::float4 _e77 = v4_;
    v4_ = _e77 + _e76;
    metal::float4 _e84 = texture_array_depth[non_uniform_index].gather_compare(samp_comp[non_uniform_index], uv, 0.0);
    metal::float4 _e85 = v4_;
    v4_ = _e85 + _e84;
    metal::float4 _e91 = (uint(0) < texture_array_unbounded[0].get_num_mip_levels() && metal::all(metal::uint2(pix) < metal::uint2(texture_array_unbounded[0].get_width(0), texture_array_unbounded[0].get_height(0))) ? texture_array_unbounded[0].read(metal::uint2(pix), 0): DefaultConstructible());
    metal::float4 _e92 = v4_;
    v4_ = _e92 + _e91;
    metal::float4 _e97 = (uint(0) < texture_array_unbounded[uniform_index].get_num_mip_levels() && metal::all(metal::uint2(pix) < metal::uint2(texture_array_unbounded[uniform_index].get_width(0), texture_array_unbounded[uniform_index].get_height(0))) ? texture_array_unbounded[uniform_index].read(metal::uint2(pix), 0): DefaultConstructible());
    metal::float4 _e98 = v4_;
    v4_ = _e98 + _e97;
    metal::float4 _e103 = (uint(0) < texture_array_unbounded[non_uniform_index].get_num_mip_levels() && metal::all(metal::uint2(pix) < metal::uint2(texture_array_unbounded[non_uniform_index].get_width(0), texture_array_unbounded[non_uniform_index].get_height(0))) ? texture_array_unbounded[non_uniform_index].read(metal::uint2(pix), 0): DefaultConstructible());
    metal::float4 _e104 = v4_;
    v4_ = _e104 + _e103;
    uint _e110 = u1_;
    u1_ = _e110 + texture_array_2darray[0].get_array_size();
    uint _e115 = u1_;
    u1_ = _e115 + texture_array_2darray[uniform_index].get_array_size();
    uint _e120 = u1_;
    u1_ = _e120 + texture_array_2darray[non_uniform_index].get_array_size();
    uint _e126 = u1_;
    u1_ = _e126 + texture_array_bounded[0].get_num_mip_levels();
    uint _e131 = u1_;
    u1_ = _e131 + texture_array_bounded[uniform_index].get_num_mip_levels();
    uint _e136 = u1_;
    u1_ = _e136 + texture_array_bounded[non_uniform_index].get_num_mip_levels();
    uint _e142 = u1_;
    u1_ = _e142 + texture_array_multisampled[0].get_num_samples();
    uint _e147 = u1_;
    u1_ = _e147 + texture_array_multisampled[uniform_index].get_num_samples();
    uint _e152 = u1_;
    u1_ = _e152 + texture_array_multisampled[non_uniform_index].get_num_samples();
    metal::float4 _e160 = texture_array_bounded[0].sample(samp[0], uv);
    metal::float4 _e161 = v4_;
    v4_ = _e161 + _e160;
    metal::float4 _e167 = texture_array_bounded[uniform_index].sample(samp[uniform_index], uv);
    metal::float4 _e168 = v4_;
    v4_ = _e168 + _e167;
    metal::float4 _e174 = texture_array_bounded[non_uniform_index].sample(samp[non_uniform_index], uv);
    metal::float4 _e175 = v4_;
    v4_ = _e175 + _e174;
    metal::float4 _e184 = texture_array_bounded[0].sample(samp[0], uv, metal::bias(0.0));
    metal::float4 _e185 = v4_;
    v4_ = _e185 + _e184;
    metal::float4 _e192 = texture_array_bounded[uniform_index].sample(samp[uniform_index], uv, metal::bias(0.0));
    metal::float4 _e193 = v4_;
    v4_ = _e193 + _e192;
    metal::float4 _e200 = texture_array_bounded[non_uniform_index].sample(samp[non_uniform_index], uv, metal::bias(0.0));
    metal::float4 _e201 = v4_;
    v4_ = _e201 + _e200;
    float _e210 = texture_array_depth[0].sample_compare(samp_comp[0], uv, 0.0);
    float _e211 = v1_;
    v1_ = _e211 + _e210;
    float _e218 = texture_array_depth[uniform_index].sample_compare(samp_comp[uniform_index], uv, 0.0);
    float _e219 = v1_;
    v1_ = _e219 + _e218;
    float _e226 = texture_array_depth[non_uniform_index].sample_compare(samp_comp[non_uniform_index], uv, 0.0);
    float _e227 = v1_;
    v1_ = _e227 + _e226;
    float _e236 = texture_array_depth[0].sample_compare(samp_comp[0], uv, 0.0);
    float _e237 = v1_;
    v1_ = _e237 + _e236;
    float _e244 = texture_array_depth[uniform_index].sample_compare(samp_comp[uniform_index], uv, 0.0);
    float _e245 = v1_;
    v1_ = _e245 + _e244;
    float _e252 = texture_array_depth[non_uniform_index].sample_compare(samp_comp[non_uniform_index], uv, 0.0);
    float _e253 = v1_;
    v1_ = _e253 + _e252;
    metal::float4 _e261 = texture_array_bounded[0].sample(samp[0], uv, metal::gradient2d(uv, uv));
    metal::float4 _e262 = v4_;
    v4_ = _e262 + _e261;
    metal::float4 _e268 = texture_array_bounded[uniform_index].sample(samp[uniform_index], uv, metal::gradient2d(uv, uv));
    metal::float4 _e269 = v4_;
    v4_ = _e269 + _e268;
    metal::float4 _e275 = texture_array_bounded[non_uniform_index].sample(samp[non_uniform_index], uv, metal::gradient2d(uv, uv));
    metal::float4 _e276 = v4_;
    v4_ = _e276 + _e275;
    metal::float4 _e285 = texture_array_bounded[0].sample(samp[0], uv, metal::level(0.0));
    metal::float4 _e286 = v4_;
    v4_ = _e286 + _e285;
    metal::float4 _e293 = texture_array_bounded[uniform_index].sample(samp[uniform_index], uv, metal::level(0.0));
    metal::float4 _e294 = v4_;
    v4_ = _e294 + _e293;
    metal::float4 _e301 = texture_array_bounded[non_uniform_index].sample(samp[non_uniform_index], uv, metal::level(0.0));
    metal::float4 _e302 = v4_;
    v4_ = _e302 + _e301;
    metal::float4 _e307 = v4_;
    if (metal::all(metal::uint2(pix) < metal::uint2(texture_array_storage[0].get_width(), texture_array_storage[0].get_height()))) {
        texture_array_storage[0].write(_e307, metal::uint2(pix));
    }
    metal::float4 _e310 = v4_;
    if (metal::all(metal::uint2(pix) < metal::uint2(texture_array_storage[uniform_index].get_width(), texture_array_storage[uniform_index].get_height()))) {
        texture_array_storage[uniform_index].write(_e310, metal::uint2(pix));
    }
    metal::float4 _e313 = v4_;
    if (metal::all(metal::uint2(pix) < metal::uint2(texture_array_storage[non_uniform_index].get_width(), texture_array_storage[non_uniform_index].get_height()))) {
        texture_array_storage[non_uniform_index].write(_e313, metal::uint2(pix));
    }
    metal::uint2 _e314 = u2_;
    uint _e315 = u1_;
    metal::float2 v2_ = static_cast<metal::float2>(_e314 + metal::uint2(_e315));
    metal::float4 _e319 = v4_;
    float _e326 = v1_;
    return main_Output { (_e319 + metal::float4(v2_.x, v2_.y, v2_.x, v2_.y)) + metal::float4(_e326) };
}
