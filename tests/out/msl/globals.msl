// language: metal1.1
#include <metal_stdlib>
#include <simd/simd.h>

struct _mslBufferSizes {
    metal::uint size3;
};

constexpr constant bool Foo_2 = true;
struct type_2 {
    float inner[10u];
};
struct Foo {
    metal::packed_float3 v3_;
    float v1_;
};
typedef metal::float2 type_6[1];
struct Dummy {
    type_6 arr;
};

kernel void main_(
  threadgroup type_2& wg
, threadgroup metal::atomic_uint& at_1
, constant Foo& alignment [[user(fake0)]]
) {
    float Foo_1 = 1.0;
    bool at = true;
    float _e8 = alignment.v1_;
    wg.inner[3] = _e8;
    float _e13 = metal::float3(alignment.v3_).x;
    wg.inner[2] = _e13;
    metal::atomic_store_explicit(&at_1, 2u, metal::memory_order_relaxed);
    return;
}
