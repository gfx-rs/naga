// language: metal2.0
#include <metal_stdlib>
#include <simd/simd.h>

using metal::uint;

struct _mslBufferSizes {
    uint size3;
};

constexpr constant bool Foo_2 = true;
struct type_2 {
    float inner[10u];
};
struct Foo {
    metal::packed_float3 v3_;
    float v1_;
};
typedef metal::float2 type_6[1];
struct type_8 {
    metal::float4 inner[20];
};

kernel void main_(
  threadgroup type_2& wg
, threadgroup metal::atomic_uint& at_1
, device Foo& alignment [[user(fake0)]]
, device type_6 const& dummy [[user(fake0)]]
, constant _mslBufferSizes& _buffer_sizes [[user(fake0)]]
) {
    metal::float3 unnamed;
    metal::float2 unnamed_1;
    int idx = 1;
    float Foo_1 = 1.0;
    bool at = true;
    float _e9 = alignment.v1_;
    wg.inner[3] = _e9;
    float _e14 = alignment.v3_[0];
    wg.inner[2] = _e14;
    metal::float3 _e16 = alignment.v3_;
    unnamed = _e16;
    metal::float3 _e19 = alignment.v3_;
    unnamed_1 = _e19.zx;
    alignment.v1_ = 4.0;
    wg.inner[1] = static_cast<float>(1 + (_buffer_sizes.size3 - 0 - 8) / 8);
    metal::atomic_store_explicit(&at_1, 2u, metal::memory_order_relaxed);
    alignment.v3_ = metal::float3(1.0);
    alignment.v3_[0] = 1.0;
    alignment.v3_[0] = 2.0;
    int _e42 = idx;
    alignment.v3_[_e42] = 3.0;
    return;
}
