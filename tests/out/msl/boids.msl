// language: metal2.0
#include <metal_stdlib>
#include <simd/simd.h>

using metal::uint;

struct _mslBufferSizes {
    uint size1;
    uint size2;
};

constexpr constant unsigned NUM_PARTICLES = 1500u;
typedef uint u32_;
typedef metal::float2 vec2f32_;
struct Particle {
    vec2f32_ pos;
    vec2f32_ vel;
};
typedef float f32_;
struct SimParams {
    f32_ deltaT;
    f32_ rule1Distance;
    f32_ rule2Distance;
    f32_ rule3Distance;
    f32_ rule1Scale;
    f32_ rule2Scale;
    f32_ rule3Scale;
};
typedef Particle arrayParticle[1];
struct Particles {
    arrayParticle particles;
};
typedef metal::uint3 vec3u32_;
typedef device Particles& ptrstorageParticles;
typedef device arrayParticle& ptrstoragearrayParticle;
typedef device Particle& ptrstorageParticle;
typedef int i32_;
typedef constant SimParams& ptruniformSimParams;
typedef thread vec2f32_& ptrfunctionvec2f32_;
typedef device Particles& ptrstorageParticles_1;
typedef device arrayParticle& ptrstoragearrayParticle_1;
typedef device Particle& ptrstorageParticle_1;

struct main_Input {
};
kernel void main_(
  vec3u32_ global_invocation_id [[thread_position_in_grid]]
, constant SimParams& params [[buffer(0)]]
, device Particles const& particlesSrc [[buffer(1)]]
, device Particles& particlesDst [[buffer(2)]]
, constant _mslBufferSizes& _buffer_sizes [[buffer(3)]]
) {
    vec2f32_ vPos = {};
    vec2f32_ vVel = {};
    vec2f32_ cMass = {};
    vec2f32_ cVel = {};
    vec2f32_ colVel = {};
    i32_ cMassCount = {};
    i32_ cVelCount = {};
    vec2f32_ pos = {};
    vec2f32_ vel = {};
    u32_ i = {};
    uint index = global_invocation_id.x;
    if (index >= NUM_PARTICLES) {
        return;
    }
    vec2f32_ vPos_1 = particlesSrc.particles[index].pos;
    vPos = vPos_1;
    vec2f32_ vVel_1 = particlesSrc.particles[index].vel;
    vVel = vVel_1;
    vec2f32_ cMass_1 = metal::float2(0.0, 0.0);
    cMass = cMass_1;
    vec2f32_ cVel_1 = metal::float2(0.0, 0.0);
    cVel = cVel_1;
    vec2f32_ colVel_1 = metal::float2(0.0, 0.0);
    colVel = colVel_1;
    cMassCount = 0;
    cVelCount = 0;
    i = 0u;
    bool loop_init = true;
    while(true) {
        if (!loop_init) {
            u32_ _e116 = i;
            i = _e116 + 1u;
        }
        loop_init = false;
        u32_ _e35 = i;
        if (_e35 >= NUM_PARTICLES) {
            break;
        }
        u32_ _e39 = i;
        if (_e39 == index) {
            continue;
        }
        u32_ _e44 = i;
        vec2f32_ _e47 = particlesSrc.particles[_e44].pos;
        pos = _e47;
        u32_ _e52 = i;
        vec2f32_ _e55 = particlesSrc.particles[_e52].vel;
        vel = _e55;
        vec2f32_ _e58 = pos;
        vec2f32_ _e60 = vPos;
        f32_ _e64 = params.rule1Distance;
        if (metal::distance(_e58, _e60) < _e64) {
            vec2f32_ _e67 = cMass;
            vec2f32_ _e69 = pos;
            cMass = _e67 + _e69;
            i32_ _e73 = cMassCount;
            cMassCount = _e73 + 1;
        }
        vec2f32_ _e78 = pos;
        vec2f32_ _e80 = vPos;
        f32_ _e84 = params.rule2Distance;
        if (metal::distance(_e78, _e80) < _e84) {
            vec2f32_ _e87 = colVel;
            vec2f32_ _e89 = pos;
            vec2f32_ _e91 = vPos;
            colVel = _e87 - (_e89 - _e91);
        }
        vec2f32_ _e96 = pos;
        vec2f32_ _e98 = vPos;
        f32_ _e102 = params.rule3Distance;
        if (metal::distance(_e96, _e98) < _e102) {
            vec2f32_ _e105 = cVel;
            vec2f32_ _e107 = vel;
            cVel = _e105 + _e107;
            i32_ _e111 = cVelCount;
            cVelCount = _e111 + 1;
        }
    }
    i32_ _e121 = cMassCount;
    if (_e121 > 0) {
        vec2f32_ _e125 = cMass;
        i32_ _e127 = cMassCount;
        vec2f32_ _e132 = vPos;
        cMass = (_e125 / metal::float2(static_cast<float>(_e127))) - _e132;
    }
    i32_ _e136 = cVelCount;
    if (_e136 > 0) {
        vec2f32_ _e140 = cVel;
        i32_ _e142 = cVelCount;
        cVel = _e140 / metal::float2(static_cast<float>(_e142));
    }
    vec2f32_ _e148 = vVel;
    vec2f32_ _e150 = cMass;
    f32_ _e153 = params.rule1Scale;
    vec2f32_ _e157 = colVel;
    f32_ _e160 = params.rule2Scale;
    vec2f32_ _e164 = cVel;
    f32_ _e167 = params.rule3Scale;
    vVel = ((_e148 + (_e150 * _e153)) + (_e157 * _e160)) + (_e164 * _e167);
    vec2f32_ _e172 = vVel;
    vec2f32_ _e175 = vVel;
    vVel = metal::normalize(_e172) * metal::clamp(metal::length(_e175), 0.0, 0.1);
    vec2f32_ _e183 = vPos;
    vec2f32_ _e185 = vVel;
    f32_ _e188 = params.deltaT;
    vPos = _e183 + (_e185 * _e188);
    float _e194 = vPos.x;
    if (_e194 < -1.0) {
        vPos.x = 1.0;
    }
    float _e203 = vPos.x;
    if (_e203 > 1.0) {
        vPos.x = -1.0;
    }
    float _e212 = vPos.y;
    if (_e212 < -1.0) {
        vPos.y = 1.0;
    }
    float _e221 = vPos.y;
    if (_e221 > 1.0) {
        vPos.y = -1.0;
    }
    vec2f32_ _e229 = vPos;
    particlesDst.particles[index].pos = _e229;
    vec2f32_ _e235 = vVel;
    particlesDst.particles[index].vel = _e235;
    return;
}
