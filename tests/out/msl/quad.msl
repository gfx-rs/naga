// language: metal1.1
#include <metal_stdlib>
#include <simd/simd.h>

constexpr constant float c_scale = 1.2000000476837158;
struct VertexOutput {
    metal::float2 uv;
    metal::float4 position;
};

struct main_Input {
    metal::float2 pos [[attribute(0)]];
    metal::float2 uv [[attribute(1)]];
};
struct main_Output {
    metal::float2 uv [[user(loc0), center_perspective]];
    metal::float4 position [[position]];
};
vertex main_Output main_(
  main_Input varyings [[stage_in]]
) {
    const auto pos = varyings.pos;
    const auto uv = varyings.uv;
    const auto _tmp = VertexOutput {uv, metal::float4(c_scale * pos, 0.0, 1.0)};
    return main_Output { _tmp.uv, _tmp.position };
}


struct main_1Input {
    metal::float2 uv_1 [[user(loc0), center_perspective]];
};
struct main_1Output {
    metal::float4 member_1 [[color(0)]];
};
fragment main_1Output main_1(
  main_1Input varyings_1 [[stage_in]]
, metal::texture2d<float, metal::access::sample> u_texture [[user(fake0)]]
, metal::sampler u_sampler [[user(fake0)]]
) {
    const auto uv_1 = varyings_1.uv_1;
    metal::float4 color = u_texture.sample(u_sampler, uv_1);
    if (color.w == 0.0) {
        metal::discard_fragment();
    }
    metal::float4 premultiplied = color.w * color;
    return main_1Output { premultiplied };
}


struct fs_extraOutput {
    metal::float4 member_2 [[color(0)]];
};
fragment fs_extraOutput fs_extra(
) {
    return fs_extraOutput { metal::float4(0.0, 0.5, 0.0, 0.5) };
}
