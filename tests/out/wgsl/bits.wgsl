@compute @workgroup_size(1, 1, 1) 
fn main() {
    var i: i32;
    var i2_: vec2<i32>;
    var i3_: vec3<i32>;
    var i4_: vec4<i32>;
    var u: u32;
    var u2_: vec2<u32>;
    var u3_: vec3<u32>;
    var u4_: vec4<u32>;
    var f2_: vec2<f32>;
    var f4_: vec4<f32>;

    i = 0;
    let i2_1 = vec2<i32>(0);
    i2_ = i2_1;
    let i3_1 = vec3<i32>(0);
    i3_ = i3_1;
    let i4_1 = vec4<i32>(0);
    i4_ = i4_1;
    u = 0u;
    let u2_1 = vec2<u32>(0u);
    u2_ = u2_1;
    let u3_1 = vec3<u32>(0u);
    u3_ = u3_1;
    let u4_1 = vec4<u32>(0u);
    u4_ = u4_1;
    let f2_1 = vec2<f32>(0.0);
    f2_ = f2_1;
    let f4_1 = vec4<f32>(0.0);
    f4_ = f4_1;
    let _e29 = f4_;
    u = pack4x8snorm(_e29);
    let _e33 = f4_;
    u = pack4x8unorm(_e33);
    let _e37 = f2_;
    u = pack2x16snorm(_e37);
    let _e41 = f2_;
    u = pack2x16unorm(_e41);
    let _e45 = f2_;
    u = pack2x16float(_e45);
    let _e49 = u;
    f4_ = unpack4x8snorm(_e49);
    let _e53 = u;
    f4_ = unpack4x8unorm(_e53);
    let _e57 = u;
    f2_ = unpack2x16snorm(_e57);
    let _e61 = u;
    f2_ = unpack2x16unorm(_e61);
    let _e65 = u;
    f2_ = unpack2x16float(_e65);
    let _e69 = i;
    let _e71 = i;
    i = insertBits(_e69, _e71, 5u, 10u);
    let _e77 = i2_;
    let _e79 = i2_;
    i2_ = insertBits(_e77, _e79, 5u, 10u);
    let _e85 = i3_;
    let _e87 = i3_;
    i3_ = insertBits(_e85, _e87, 5u, 10u);
    let _e93 = i4_;
    let _e95 = i4_;
    i4_ = insertBits(_e93, _e95, 5u, 10u);
    let _e101 = u;
    let _e103 = u;
    u = insertBits(_e101, _e103, 5u, 10u);
    let _e109 = u2_;
    let _e111 = u2_;
    u2_ = insertBits(_e109, _e111, 5u, 10u);
    let _e117 = u3_;
    let _e119 = u3_;
    u3_ = insertBits(_e117, _e119, 5u, 10u);
    let _e125 = u4_;
    let _e127 = u4_;
    u4_ = insertBits(_e125, _e127, 5u, 10u);
    let _e133 = i;
    i = extractBits(_e133, 5u, 10u);
    let _e139 = i2_;
    i2_ = extractBits(_e139, 5u, 10u);
    let _e145 = i3_;
    i3_ = extractBits(_e145, 5u, 10u);
    let _e151 = i4_;
    i4_ = extractBits(_e151, 5u, 10u);
    let _e157 = u;
    u = extractBits(_e157, 5u, 10u);
    let _e163 = u2_;
    u2_ = extractBits(_e163, 5u, 10u);
    let _e169 = u3_;
    u3_ = extractBits(_e169, 5u, 10u);
    let _e175 = u4_;
    u4_ = extractBits(_e175, 5u, 10u);
    let _e181 = i;
    i = firstTrailingBit(_e181);
    let _e185 = u2_;
    u2_ = firstTrailingBit(_e185);
    let _e189 = i3_;
    i3_ = firstLeadingBit(_e189);
    let _e193 = u;
    u = firstLeadingBit(_e193);
    let _e197 = i;
    i = countOneBits(_e197);
    let _e201 = i2_;
    i2_ = countOneBits(_e201);
    let _e205 = i3_;
    i3_ = countOneBits(_e205);
    let _e209 = i4_;
    i4_ = countOneBits(_e209);
    let _e213 = u;
    u = countOneBits(_e213);
    let _e217 = u2_;
    u2_ = countOneBits(_e217);
    let _e221 = u3_;
    u3_ = countOneBits(_e221);
    let _e225 = u4_;
    u4_ = countOneBits(_e225);
    let _e229 = i;
    i = reverseBits(_e229);
    let _e233 = i2_;
    i2_ = reverseBits(_e233);
    let _e237 = i3_;
    i3_ = reverseBits(_e237);
    let _e241 = i4_;
    i4_ = reverseBits(_e241);
    let _e245 = u;
    u = reverseBits(_e245);
    let _e249 = u2_;
    u2_ = reverseBits(_e249);
    let _e253 = u3_;
    u3_ = reverseBits(_e253);
    let _e257 = u4_;
    u4_ = reverseBits(_e257);
    return;
}
