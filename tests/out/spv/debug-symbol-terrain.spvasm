; SPIR-V
; Version: 1.1
; Generator: rspirv
; Bound: 646
OpCapability Shader
OpExtension "SPV_KHR_storage_buffer_storage_class"
%1 = OpExtInstImport "GLSL.std.450"
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %352 "gen_terrain_compute" %349
OpEntryPoint Vertex %419 "gen_terrain_vertex" %410 %413 %415 %417
OpEntryPoint Fragment %469 "gen_terrain_fragment" %459 %461 %464 %467 %468
OpEntryPoint Vertex %560 "vs_main" %551 %554 %556 %557 %559
OpEntryPoint Fragment %586 "fs_main" %579 %581 %583 %585
OpExecutionMode %352 LocalSize 64 1 1
OpExecutionMode %469 OriginUpperLeft
OpExecutionMode %586 OriginUpperLeft
%3 = OpString "debug-symbol-terrain"
OpSource Unknown 0 %3 "// Taken from https://github.com/sotrh/learn-wgpu/blob/11820796f5e1dbce42fb1119f04ddeb4b167d2a0/code/intermediate/tutorial13-terrain/src/terrain.wgsl
// ============================
// Terrain Generation
// ============================

// https://gist.github.com/munrocket/236ed5ba7e409b8bdf1ff6eca5dcdc39
//  MIT License. Â© Ian McEwan, Stefan Gustavson, Munrocket
// - Less condensed glsl implementation with comments can be found at https://weber.itn.liu.se/~stegu/jgt2012/article.pdf

fn permute3(x: vec3<f32>) -> vec3<f32> { return (((x * 34.) + 1.) * x) % vec3<f32>(289.); }

fn snoise2(v: vec2<f32>) -> f32 {
    let C = vec4<f32>(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439);
    var i: vec2<f32> = floor(v + dot(v, C.yy));
    let x0 = v - i + dot(i, C.xx);
    // I flipped the condition here from > to < as it fixed some artifacting I was observing
    var i1: vec2<f32> = select(vec2<f32>(1., 0.), vec2<f32>(0., 1.), (x0.x < x0.y));
    var x12: vec4<f32> = x0.xyxy + C.xxzz - vec4<f32>(i1, 0., 0.);
    i = i % vec2<f32>(289.);
    let p = permute3(permute3(i.y + vec3<f32>(0., i1.y, 1.)) + i.x + vec3<f32>(0., i1.x, 1.));
    var m: vec3<f32> = max(0.5 - vec3<f32>(dot(x0, x0), dot(x12.xy, x12.xy), dot(x12.zw, x12.zw)), vec3<f32>(0.));
    m = m * m;
    m = m * m;
    let x = 2. * fract(p * C.www) - 1.;
    let h = abs(x) - 0.5;
    let ox = floor(x + 0.5);
    let a0 = x - ox;
    m = m * (1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h));
    let g = vec3<f32>(a0.x * x0.x + h.x * x0.y, a0.yz * x12.xz + h.yz * x12.yw);
    return 130. * dot(m, g);
}


fn fbm(p: vec2<f32>) -> f32 {
    let NUM_OCTAVES: u32 = 5u;
    var x = p * 0.01;
    var v = 0.0;
    var a = 0.5;
    let shift = vec2<f32>(100.0);
    let cs = vec2<f32>(cos(0.5), sin(0.5));
    let rot = mat2x2<f32>(cs.x, cs.y, -cs.y, cs.x);

    for (var i = 0u; i < NUM_OCTAVES; i = i + 1u) {
        v = v + a * snoise2(x);
        x = rot * x * 2.0 + shift;
        a = a * 0.5;
    }

    return v;
}

struct ChunkData {
    chunk_size: vec2<u32>,
    chunk_corner: vec2<i32>,
    min_max_height: vec2<f32>,
}

struct Vertex {
    @location(0) position: vec3<f32>,
    @location(1) normal: vec3<f32>,
}

struct VertexBuffer {
    data: array<Vertex>, // stride: 32
}

struct IndexBuffer {
    data: array<u32>,
}

@group(0) @binding(0) var<uniform> chunk_data: ChunkData;
@group(0) @binding(1) var<storage, read_write> vertices: VertexBuffer;
@group(0) @binding(2) var<storage, read_write> indices: IndexBuffer;

fn terrain_point(p: vec2<f32>, min_max_height: vec2<f32>) -> vec3<f32> {
    return vec3<f32>(
        p.x,
        mix(min_max_height.x, min_max_height.y, fbm(p)),
        p.y,
    );
}

fn terrain_vertex(p: vec2<f32>, min_max_height: vec2<f32>) -> Vertex {
    let v = terrain_point(p, min_max_height);

    let tpx = terrain_point(p + vec2<f32>(0.1, 0.0), min_max_height) - v;
    let tpz = terrain_point(p + vec2<f32>(0.0, 0.1), min_max_height) - v;
    let tnx = terrain_point(p + vec2<f32>(-0.1, 0.0), min_max_height) - v;
    let tnz = terrain_point(p + vec2<f32>(0.0, -0.1), min_max_height) - v;

    let pn = normalize(cross(tpz, tpx));
    let nn = normalize(cross(tnz, tnx));

    let n = (pn + nn) * 0.5;

    return Vertex(v, n);
}

fn index_to_p(vert_index: u32, chunk_size: vec2<u32>, chunk_corner: vec2<i32>) -> vec2<f32> {
    return vec2(
        f32(vert_index) % f32(chunk_size.x + 1u),
        f32(vert_index / (chunk_size.x + 1u)),
    ) + vec2<f32>(chunk_corner);
}

@compute @workgroup_size(64)
fn gen_terrain_compute(
    @builtin(global_invocation_id) gid: vec3<u32>
) {
    // Create vert_component
    let vert_index = gid.x;

    let p = index_to_p(vert_index, chunk_data.chunk_size, chunk_data.chunk_corner);

    vertices.data[vert_index] = terrain_vertex(p, chunk_data.min_max_height);

    // Create indices
    let start_index = gid.x * 6u; // using TriangleList

    if (start_index >= (chunk_data.chunk_size.x * chunk_data.chunk_size.y * 6u)) { return; }

    let v00 = vert_index + gid.x / chunk_data.chunk_size.x;
    let v10 = v00 + 1u;
    let v01 = v00 + chunk_data.chunk_size.x + 1u;
    let v11 = v01 + 1u;

    indices.data[start_index] = v00;
    indices.data[start_index + 1u] = v01;
    indices.data[start_index + 2u] = v11;
    indices.data[start_index + 3u] = v00;
    indices.data[start_index + 4u] = v11;
    indices.data[start_index + 5u] = v10;
}

// ============================
// Terrain Gen (Fragment Shader)
// ============================

struct GenData {
    chunk_size: vec2<u32>,
    chunk_corner: vec2<i32>,
    min_max_height: vec2<f32>,
    texture_size: u32,
    start_index: u32,
}
@group(0)
@binding(0)
var<uniform> gen_data: GenData;

struct GenVertexOutput {
    @location(0)
    index: u32,
    @builtin(position)
    position: vec4<f32>,
    @location(1)
    uv: vec2<f32>,
};

@vertex
fn gen_terrain_vertex(@builtin(vertex_index) vindex: u32) -> GenVertexOutput {
    let u = f32(((vindex + 2u) / 3u) % 2u);
    let v = f32(((vindex + 1u) / 3u) % 2u);
    let uv = vec2<f32>(u, v);

    let position = vec4<f32>(-1.0 + uv * 2.0, 0.0, 1.0);

    // TODO: maybe replace this with u32(dot(uv, vec2(f32(gen_data.texture_dim.x))))
    let index = u32(uv.x * f32(gen_data.texture_size) + uv.y * f32(gen_data.texture_size)) + gen_data.start_index;

    return GenVertexOutput(index, position, uv);
}


struct GenFragmentOutput {
    @location(0) vert_component: u32,
    @location(1) index: u32,
}

@fragment
fn gen_terrain_fragment(in: GenVertexOutput) -> GenFragmentOutput {
    let i = u32(in.uv.x * f32(gen_data.texture_size) + in.uv.y * f32(gen_data.texture_size * gen_data.texture_size)) + gen_data.start_index;
    let vert_index = u32(floor(f32(i) / 6.));
    let comp_index = i % 6u;

    let p = index_to_p(vert_index, gen_data.chunk_size, gen_data.chunk_corner);
    let v = terrain_vertex(p, gen_data.min_max_height);

    var vert_component: f32 = 0.;
    
    switch comp_index {
        case 0u: { vert_component = v.position.x; }
        case 1u: { vert_component = v.position.y; }
        case 2u: { vert_component = v.position.z; }
        case 3u: { vert_component = v.normal.x; }
        case 4u: { vert_component = v.normal.y; }
        case 5u: { vert_component = v.normal.z; }
        default: {}
    }

    let v00 = vert_index + vert_index / gen_data.chunk_size.x;
    let v10 = v00 + 1u;
    let v01 = v00 + gen_data.chunk_size.x + 1u;
    let v11 = v01 + 1u;

    var index = 0u;
    switch comp_index {
        case 0u, 3u: { index = v00; }
        case 2u, 4u: { index = v11; }
        case 1u: { index = v01; }
        case 5u: { index = v10; }
        default: {}
    }
    index = in.index;
    // index = gen_data.start_index;
    // indices.data[start_index] = v00;
    // indices.data[start_index + 1u] = v01;
    // indices.data[start_index + 2u] = v11;
    // indices.data[start_index + 3u] = v00;
    // indices.data[start_index + 4u] = v11;
    // indices.data[start_index + 5u] = v10;

    let ivert_component = bitcast<u32>(vert_component);
    return GenFragmentOutput(ivert_component, index);
}

// ============================
// Terrain Rendering
// ============================

struct Camera {
    view_pos: vec4<f32>,
    view_proj: mat4x4<f32>,
}
@group(0) @binding(0)
var<uniform> camera: Camera;

struct Light {
    position: vec3<f32>,
    color: vec3<f32>,
}
@group(1) @binding(0)
var<uniform> light: Light;

struct VertexOutput {
    @builtin(position) clip_position: vec4<f32>,
    @location(0) normal: vec3<f32>,
    @location(1) world_pos: vec3<f32>,
}

@vertex
fn vs_main(
    vertex: Vertex,
) -> VertexOutput {
    let clip_position = camera.view_proj * vec4<f32>(vertex.position, 1.);
    let normal = vertex.normal;
    return VertexOutput(clip_position, normal, vertex.position);
}

@group(2) @binding(0)
var t_diffuse: texture_2d<f32>;
@group(2) @binding(1)
var s_diffuse: sampler;
@group(2) @binding(2)
var t_normal: texture_2d<f32>;
@group(2) @binding(3)
var s_normal: sampler;

fn color23(p: vec2<f32>) -> vec3<f32> {
    return vec3<f32>(
        snoise2(p) * 0.5 + 0.5,
        snoise2(p + vec2<f32>(23., 32.)) * 0.5 + 0.5,
        snoise2(p + vec2<f32>(-43., 3.)) * 0.5 + 0.5,
    );
}

@fragment
fn fs_main(in: VertexOutput) -> @location(0) vec4<f32> {
    var color = smoothstep(vec3<f32>(0.0), vec3<f32>(0.1), fract(in.world_pos));
    color = mix(vec3<f32>(0.5, 0.1, 0.7), vec3<f32>(0.2, 0.2, 0.2), vec3<f32>(color.x * color.y * color.z));

    let ambient_strength = 0.1;
    let ambient_color = light.color * ambient_strength;

    let light_dir = normalize(light.position - in.world_pos);
    let view_dir = normalize(camera.view_pos.xyz - in.world_pos);
    let half_dir = normalize(view_dir + light_dir);

    let diffuse_strength = max(dot(in.normal, light_dir), 0.0);
    let diffuse_color = diffuse_strength * light.color;

    let specular_strength = pow(max(dot(in.normal, half_dir), 0.0), 32.0);
    let specular_color = specular_strength * light.color;

    let result = (ambient_color + diffuse_color + specular_color) * color;

    return vec4<f32>(result, 1.0);
}"
OpMemberName %13 0 "chunk_size"
OpMemberName %13 1 "chunk_corner"
OpMemberName %13 2 "min_max_height"
OpName %13 "ChunkData"
OpMemberName %14 0 "position"
OpMemberName %14 1 "normal"
OpName %14 "Vertex"
OpMemberName %16 0 "data"
OpName %16 "VertexBuffer"
OpMemberName %18 0 "data"
OpName %18 "IndexBuffer"
OpMemberName %20 0 "chunk_size"
OpMemberName %20 1 "chunk_corner"
OpMemberName %20 2 "min_max_height"
OpMemberName %20 3 "texture_size"
OpMemberName %20 4 "start_index"
OpName %20 "GenData"
OpMemberName %21 0 "index"
OpMemberName %21 1 "position"
OpMemberName %21 2 "uv"
OpName %21 "GenVertexOutput"
OpMemberName %22 0 "vert_component"
OpMemberName %22 1 "index"
OpName %22 "GenFragmentOutput"
OpMemberName %24 0 "view_pos"
OpMemberName %24 1 "view_proj"
OpName %24 "Camera"
OpMemberName %25 0 "position"
OpMemberName %25 1 "color"
OpName %25 "Light"
OpMemberName %26 0 "clip_position"
OpMemberName %26 1 "normal"
OpMemberName %26 2 "world_pos"
OpName %26 "VertexOutput"
OpName %40 "chunk_data"
OpName %43 "vertices"
OpName %45 "indices"
OpName %47 "gen_data"
OpName %50 "camera"
OpName %53 "light"
OpName %56 "t_diffuse"
OpName %58 "s_diffuse"
OpName %60 "t_normal"
OpName %61 "s_normal"
OpName %63 "x"
OpName %64 "permute3"
OpName %76 "i"
OpName %79 "i1"
OpName %80 "x12"
OpName %83 "m"
OpName %87 "v"
OpName %88 "snoise2"
OpName %213 "x"
OpName %214 "v"
OpName %217 "a"
OpName %218 "i"
OpName %222 "p"
OpName %223 "fbm"
OpName %262 "p"
OpName %263 "min_max_height"
OpName %264 "terrain_point"
OpName %275 "p"
OpName %276 "min_max_height"
OpName %277 "terrain_vertex"
OpName %307 "vert_index"
OpName %308 "chunk_size"
OpName %309 "chunk_corner"
OpName %310 "index_to_p"
OpName %326 "p"
OpName %327 "color23"
OpName %349 "gid"
OpName %352 "gen_terrain_compute"
OpName %410 "vindex"
OpName %413 "index"
OpName %415 "position"
OpName %417 "uv"
OpName %419 "gen_terrain_vertex"
OpName %455 "vert_component"
OpName %456 "index"
OpName %459 "index"
OpName %461 "position"
OpName %464 "uv"
OpName %467 "vert_component"
OpName %468 "index"
OpName %469 "gen_terrain_fragment"
OpName %551 "position"
OpName %554 "normal"
OpName %556 "clip_position"
OpName %557 "normal"
OpName %559 "world_pos"
OpName %560 "vs_main"
OpName %576 "color"
OpName %579 "clip_position"
OpName %581 "normal"
OpName %583 "world_pos"
OpName %586 "fs_main"
OpMemberDecorate %13 0 Offset 0
OpMemberDecorate %13 1 Offset 8
OpMemberDecorate %13 2 Offset 16
OpMemberDecorate %14 0 Offset 0
OpMemberDecorate %14 1 Offset 16
OpDecorate %15 ArrayStride 32
OpMemberDecorate %16 0 Offset 0
OpDecorate %16 Block
OpDecorate %17 ArrayStride 4
OpMemberDecorate %18 0 Offset 0
OpDecorate %18 Block
OpMemberDecorate %20 0 Offset 0
OpMemberDecorate %20 1 Offset 8
OpMemberDecorate %20 2 Offset 16
OpMemberDecorate %20 3 Offset 24
OpMemberDecorate %20 4 Offset 28
OpMemberDecorate %21 0 Offset 0
OpMemberDecorate %21 1 Offset 16
OpMemberDecorate %21 2 Offset 32
OpMemberDecorate %22 0 Offset 0
OpMemberDecorate %22 1 Offset 4
OpMemberDecorate %24 0 Offset 0
OpMemberDecorate %24 1 Offset 16
OpMemberDecorate %24 1 ColMajor
OpMemberDecorate %24 1 MatrixStride 16
OpMemberDecorate %25 0 Offset 0
OpMemberDecorate %25 1 Offset 16
OpMemberDecorate %26 0 Offset 0
OpMemberDecorate %26 1 Offset 16
OpMemberDecorate %26 2 Offset 32
OpDecorate %40 DescriptorSet 0
OpDecorate %40 Binding 0
OpDecorate %41 Block
OpMemberDecorate %41 0 Offset 0
OpDecorate %43 DescriptorSet 0
OpDecorate %43 Binding 1
OpDecorate %45 DescriptorSet 0
OpDecorate %45 Binding 2
OpDecorate %47 DescriptorSet 0
OpDecorate %47 Binding 0
OpDecorate %48 Block
OpMemberDecorate %48 0 Offset 0
OpDecorate %50 DescriptorSet 0
OpDecorate %50 Binding 0
OpDecorate %51 Block
OpMemberDecorate %51 0 Offset 0
OpDecorate %53 DescriptorSet 1
OpDecorate %53 Binding 0
OpDecorate %54 Block
OpMemberDecorate %54 0 Offset 0
OpDecorate %56 DescriptorSet 2
OpDecorate %56 Binding 0
OpDecorate %58 DescriptorSet 2
OpDecorate %58 Binding 1
OpDecorate %60 DescriptorSet 2
OpDecorate %60 Binding 2
OpDecorate %61 DescriptorSet 2
OpDecorate %61 Binding 3
OpDecorate %349 BuiltIn GlobalInvocationId
OpDecorate %410 BuiltIn VertexIndex
OpDecorate %413 Location 0
OpDecorate %413 Flat
OpDecorate %415 BuiltIn Position
OpDecorate %417 Location 1
OpDecorate %459 Location 0
OpDecorate %459 Flat
OpDecorate %461 BuiltIn FragCoord
OpDecorate %464 Location 1
OpDecorate %467 Location 0
OpDecorate %468 Location 1
OpDecorate %551 Location 0
OpDecorate %554 Location 1
OpDecorate %556 BuiltIn Position
OpDecorate %557 Location 0
OpDecorate %559 Location 1
OpDecorate %579 BuiltIn FragCoord
OpDecorate %581 Location 0
OpDecorate %583 Location 1
OpDecorate %585 Location 0
%2 = OpTypeVoid
%5 = OpTypeFloat 32
%4 = OpTypeVector %5 3
%6 = OpTypeVector %5 2
%7 = OpTypeVector %5 4
%8 = OpTypeInt 32 0
%9 = OpTypeMatrix %6 2
%10 = OpTypeVector %8 2
%12 = OpTypeInt 32 1
%11 = OpTypeVector %12 2
%13 = OpTypeStruct %10 %11 %6
%14 = OpTypeStruct %4 %4
%15 = OpTypeRuntimeArray %14
%16 = OpTypeStruct %15
%17 = OpTypeRuntimeArray %8
%18 = OpTypeStruct %17
%19 = OpTypeVector %8 3
%20 = OpTypeStruct %10 %11 %6 %8 %8
%21 = OpTypeStruct %8 %7 %6
%22 = OpTypeStruct %8 %8
%23 = OpTypeMatrix %7 4
%24 = OpTypeStruct %7 %23
%25 = OpTypeStruct %4 %4
%26 = OpTypeStruct %7 %4 %4
%27 = OpTypeImage %5 2D 0 0 0 1 Unknown
%28 = OpTypeSampler
%29 = OpConstant  %12  0
%30 = OpConstant  %12  1
%31 = OpConstant  %12  2
%32 = OpConstant  %12  64
%33 = OpConstant  %8  0
%34 = OpConstant  %8  1
%35 = OpConstant  %8  2
%36 = OpConstant  %8  3
%37 = OpConstant  %8  4
%38 = OpConstant  %8  5
%39 = OpConstant  %12  3
%41 = OpTypeStruct %13
%42 = OpTypePointer Uniform %41
%40 = OpVariable  %42  Uniform
%44 = OpTypePointer StorageBuffer %16
%43 = OpVariable  %44  StorageBuffer
%46 = OpTypePointer StorageBuffer %18
%45 = OpVariable  %46  StorageBuffer
%48 = OpTypeStruct %20
%49 = OpTypePointer Uniform %48
%47 = OpVariable  %49  Uniform
%51 = OpTypeStruct %24
%52 = OpTypePointer Uniform %51
%50 = OpVariable  %52  Uniform
%54 = OpTypeStruct %25
%55 = OpTypePointer Uniform %54
%53 = OpVariable  %55  Uniform
%57 = OpTypePointer UniformConstant %27
%56 = OpVariable  %57  UniformConstant
%59 = OpTypePointer UniformConstant %28
%58 = OpVariable  %59  UniformConstant
%60 = OpVariable  %57  UniformConstant
%61 = OpVariable  %59  UniformConstant
%65 = OpTypeFunction %4 %4
%66 = OpConstant  %5  34.0
%67 = OpConstant  %5  1.0
%68 = OpConstant  %5  289.0
%77 = OpTypePointer Function %6
%78 = OpConstantNull  %6
%81 = OpTypePointer Function %7
%82 = OpConstantNull  %7
%84 = OpTypePointer Function %4
%85 = OpConstantNull  %4
%89 = OpTypeFunction %5 %6
%90 = OpConstant  %5  0.21132487
%91 = OpConstant  %5  0.36602542
%92 = OpConstant  %5  -0.57735026
%93 = OpConstant  %5  0.024390243
%94 = OpConstant  %5  0.0
%95 = OpConstant  %5  0.5
%96 = OpConstant  %5  2.0
%97 = OpConstant  %5  1.7928429
%98 = OpConstant  %5  0.85373473
%99 = OpConstant  %5  130.0
%118 = OpTypeBool
%121 = OpTypeVector %118 2
%132 = OpTypePointer Function %5
%215 = OpTypePointer Function %5
%216 = OpConstantNull  %5
%219 = OpTypePointer Function %8
%220 = OpConstantNull  %8
%224 = OpConstant  %5  0.01
%225 = OpConstant  %5  100.0
%265 = OpTypeFunction %4 %6 %6
%278 = OpTypeFunction %14 %6 %6
%279 = OpConstant  %5  0.1
%280 = OpConstant  %5  -0.1
%311 = OpTypeFunction %6 %8 %10 %11
%328 = OpTypeFunction %4 %6
%329 = OpConstant  %5  23.0
%330 = OpConstant  %5  32.0
%331 = OpConstant  %5  -43.0
%332 = OpConstant  %5  3.0
%350 = OpTypePointer Input %19
%349 = OpVariable  %350  Input
%353 = OpTypeFunction %2
%354 = OpTypePointer Uniform %13
%356 = OpConstant  %8  6
%359 = OpTypePointer Uniform %10
%362 = OpTypePointer Uniform %11
%366 = OpTypePointer StorageBuffer %15
%367 = OpTypePointer StorageBuffer %14
%368 = OpTypePointer Uniform %6
%375 = OpTypePointer Uniform %8
%396 = OpTypePointer StorageBuffer %17
%397 = OpTypePointer StorageBuffer %8
%411 = OpTypePointer Input %8
%410 = OpVariable  %411  Input
%414 = OpTypePointer Output %8
%413 = OpVariable  %414  Output
%416 = OpTypePointer Output %7
%415 = OpVariable  %416  Output
%418 = OpTypePointer Output %6
%417 = OpVariable  %418  Output
%420 = OpTypePointer Uniform %20
%422 = OpConstant  %5  -1.0
%437 = OpTypePointer Uniform %8
%459 = OpVariable  %411  Input
%462 = OpTypePointer Input %7
%461 = OpVariable  %462  Input
%465 = OpTypePointer Input %6
%464 = OpVariable  %465  Input
%467 = OpVariable  %414  Output
%468 = OpVariable  %414  Output
%471 = OpConstant  %5  6.0
%552 = OpTypePointer Input %4
%551 = OpVariable  %552  Input
%554 = OpVariable  %552  Input
%556 = OpVariable  %416  Output
%558 = OpTypePointer Output %4
%557 = OpVariable  %558  Output
%559 = OpVariable  %558  Output
%561 = OpTypePointer Uniform %24
%564 = OpTypePointer Uniform %23
%579 = OpVariable  %462  Input
%581 = OpVariable  %552  Input
%583 = OpVariable  %552  Input
%585 = OpVariable  %416  Output
%588 = OpTypePointer Uniform %25
%590 = OpConstant  %5  0.7
%591 = OpConstant  %5  0.2
%610 = OpTypePointer Uniform %4
%619 = OpTypePointer Uniform %7
%64 = OpFunction  %4  None %65
%63 = OpFunctionParameter  %4
%62 = OpLabel
OpBranch %69
%69 = OpLabel
OpLine %3 10 52
%70 = OpVectorTimesScalar  %4  %63 %66
OpLine %3 10 50
%71 = OpCompositeConstruct  %4  %67 %67 %67
%72 = OpFAdd  %4  %70 %71
%73 = OpFMul  %4  %72 %63
OpLine %3 10 49
%74 = OpCompositeConstruct  %4  %68 %68 %68
%75 = OpFRem  %4  %73 %74
OpReturnValue %75
OpFunctionEnd
%88 = OpFunction  %5  None %89
%87 = OpFunctionParameter  %6
%86 = OpLabel
%79 = OpVariable  %77  Function %78
%83 = OpVariable  %84  Function %85
%76 = OpVariable  %77  Function %78
%80 = OpVariable  %81  Function %82
OpBranch %100
%100 = OpLabel
OpLine %3 13 13
%101 = OpCompositeConstruct  %7  %90 %91 %92 %93
OpLine %3 14 24
%102 = OpCompositeConstruct  %6  %91 %91
%103 = OpDot  %5  %87 %102
%104 = OpCompositeConstruct  %6  %103 %103
%105 = OpFAdd  %6  %87 %104
%106 = OpExtInst  %6  %1 Floor %105
OpLine %3 14 5
OpStore %76 %106
OpLine %3 15 14
%107 = OpLoad  %6  %76
%108 = OpFSub  %6  %87 %107
%109 = OpLoad  %6  %76
%110 = OpCompositeConstruct  %6  %90 %90
%111 = OpDot  %5  %109 %110
%112 = OpCompositeConstruct  %6  %111 %111
%113 = OpFAdd  %6  %108 %112
OpLine %3 17 32
%114 = OpCompositeConstruct  %6  %67 %94
OpLine %3 17 25
%115 = OpCompositeConstruct  %6  %94 %67
%116 = OpCompositeExtract  %5  %113 0
%117 = OpCompositeExtract  %5  %113 1
%119 = OpFOrdLessThan  %118  %116 %117
%122 = OpCompositeConstruct  %121  %119 %119
%120 = OpSelect  %6  %122 %115 %114
OpLine %3 17 5
OpStore %79 %120
OpLine %3 18 26
%123 = OpVectorShuffle  %7  %113 %113 0 1 0 1
%124 = OpCompositeConstruct  %7  %90 %90 %92 %92
%125 = OpFAdd  %7  %123 %124
%126 = OpLoad  %6  %79
OpLine %3 18 26
%127 = OpCompositeConstruct  %7  %126 %94 %94
%128 = OpFSub  %7  %125 %127
OpLine %3 18 5
OpStore %80 %128
OpLine %3 1 1
%129 = OpLoad  %6  %76
OpLine %3 19 9
%130 = OpCompositeConstruct  %6  %68 %68
%131 = OpFRem  %6  %129 %130
OpLine %3 19 5
OpStore %76 %131
OpLine %3 20 31
%133 = OpAccessChain  %132  %76 %34
%134 = OpLoad  %5  %133
OpLine %3 20 51
%135 = OpAccessChain  %132  %79 %34
%136 = OpLoad  %5  %135
OpLine %3 20 31
%137 = OpCompositeConstruct  %4  %94 %136 %67
%138 = OpCompositeConstruct  %4  %134 %134 %134
%139 = OpFAdd  %4  %138 %137
OpLine %3 20 22
%140 = OpFunctionCall  %4  %64 %139
OpLine %3 20 22
%141 = OpAccessChain  %132  %76 %33
%142 = OpLoad  %5  %141
%143 = OpCompositeConstruct  %4  %142 %142 %142
%144 = OpFAdd  %4  %140 %143
OpLine %3 20 84
%145 = OpAccessChain  %132  %79 %33
%146 = OpLoad  %5  %145
OpLine %3 20 22
%147 = OpCompositeConstruct  %4  %94 %146 %67
%148 = OpFAdd  %4  %144 %147
OpLine %3 20 13
%149 = OpFunctionCall  %4  %64 %148
OpLine %3 21 28
%150 = OpDot  %5  %113 %113
%151 = OpLoad  %7  %80
%152 = OpVectorShuffle  %6  %151 %151 0 1
%153 = OpLoad  %7  %80
%154 = OpVectorShuffle  %6  %153 %153 0 1
%155 = OpDot  %5  %152 %154
%156 = OpLoad  %7  %80
%157 = OpVectorShuffle  %6  %156 %156 2 3
%158 = OpLoad  %7  %80
%159 = OpVectorShuffle  %6  %158 %158 2 3
%160 = OpDot  %5  %157 %159
%161 = OpCompositeConstruct  %4  %150 %155 %160
%162 = OpCompositeConstruct  %4  %95 %95 %95
%163 = OpFSub  %4  %162 %161
OpLine %3 21 24
%164 = OpCompositeConstruct  %4  %94 %94 %94
%165 = OpExtInst  %4  %1 FMax %163 %164
OpLine %3 21 5
OpStore %83 %165
OpLine %3 22 9
%166 = OpLoad  %4  %83
%167 = OpLoad  %4  %83
%168 = OpFMul  %4  %166 %167
OpLine %3 22 5
OpStore %83 %168
OpLine %3 23 9
%169 = OpLoad  %4  %83
%170 = OpLoad  %4  %83
%171 = OpFMul  %4  %169 %170
OpLine %3 23 5
OpStore %83 %171
OpLine %3 24 13
%172 = OpCompositeConstruct  %4  %93 %93 %93
%173 = OpFMul  %4  %149 %172
%174 = OpExtInst  %4  %1 Fract %173
%175 = OpVectorTimesScalar  %4  %174 %96
OpLine %3 24 13
%176 = OpCompositeConstruct  %4  %67 %67 %67
%177 = OpFSub  %4  %175 %176
OpLine %3 25 13
%178 = OpExtInst  %4  %1 FAbs %177
OpLine %3 25 13
%179 = OpCompositeConstruct  %4  %95 %95 %95
%180 = OpFSub  %4  %178 %179
OpLine %3 26 14
%181 = OpCompositeConstruct  %4  %95 %95 %95
%182 = OpFAdd  %4  %177 %181
%183 = OpExtInst  %4  %1 Floor %182
OpLine %3 27 14
%184 = OpFSub  %4  %177 %183
OpLine %3 1 1
%185 = OpLoad  %4  %83
OpLine %3 28 9
%186 = OpFMul  %4  %184 %184
%187 = OpFMul  %4  %180 %180
%188 = OpFAdd  %4  %186 %187
%189 = OpVectorTimesScalar  %4  %188 %98
%190 = OpCompositeConstruct  %4  %97 %97 %97
%191 = OpFSub  %4  %190 %189
%192 = OpFMul  %4  %185 %191
OpLine %3 28 5
OpStore %83 %192
OpLine %3 29 13
%193 = OpCompositeExtract  %5  %184 0
%194 = OpCompositeExtract  %5  %113 0
%195 = OpFMul  %5  %193 %194
%196 = OpCompositeExtract  %5  %180 0
%197 = OpCompositeExtract  %5  %113 1
%198 = OpFMul  %5  %196 %197
%199 = OpFAdd  %5  %195 %198
%200 = OpVectorShuffle  %6  %184 %184 1 2
%201 = OpLoad  %7  %80
%202 = OpVectorShuffle  %6  %201 %201 0 2
%203 = OpFMul  %6  %200 %202
%204 = OpVectorShuffle  %6  %180 %180 1 2
%205 = OpLoad  %7  %80
%206 = OpVectorShuffle  %6  %205 %205 1 3
%207 = OpFMul  %6  %204 %206
%208 = OpFAdd  %6  %203 %207
%209 = OpCompositeConstruct  %4  %199 %208
OpLine %3 30 12
%210 = OpLoad  %4  %83
%211 = OpDot  %5  %210 %209
%212 = OpFMul  %5  %99 %211
OpReturnValue %212
OpFunctionEnd
%223 = OpFunction  %5  None %89
%222 = OpFunctionParameter  %6
%221 = OpLabel
%214 = OpVariable  %215  Function %216
%218 = OpVariable  %219  Function %220
%213 = OpVariable  %77  Function %78
%217 = OpVariable  %215  Function %216
OpBranch %226
%226 = OpLabel
OpLine %3 36 13
%227 = OpVectorTimesScalar  %6  %222 %224
OpLine %3 36 5
OpStore %213 %227
OpLine %3 37 5
OpStore %214 %94
OpLine %3 38 5
OpStore %217 %95
OpLine %3 39 17
%228 = OpCompositeConstruct  %6  %225 %225
OpLine %3 40 24
%229 = OpExtInst  %5  %1 Cos %95
OpLine %3 40 14
%230 = OpExtInst  %5  %1 Sin %95
%231 = OpCompositeConstruct  %6  %229 %230
OpLine %3 41 15
%232 = OpFNegate  %5  %230
%233 = OpCompositeConstruct  %6  %229 %230
%234 = OpCompositeConstruct  %6  %232 %229
%235 = OpCompositeConstruct  %9  %233 %234
OpLine %3 43 10
OpStore %218 %33
OpBranch %236
%236 = OpLabel
OpLine %3 43 5
OpLoopMerge %237 %239 None
OpBranch %238
%238 = OpLabel
OpLine %3 43 22
%240 = OpLoad  %8  %218
%241 = OpULessThan  %118  %240 %38
OpLine %3 43 21
OpSelectionMerge %242 None
OpBranchConditional %241 %242 %243
%243 = OpLabel
OpBranch %237
%242 = OpLabel
OpBranch %244
%244 = OpLabel
OpLine %3 1 1
%246 = OpLoad  %5  %214
%247 = OpLoad  %5  %217
%248 = OpLoad  %6  %213
OpLine %3 44 21
%249 = OpFunctionCall  %5  %88 %248
OpLine %3 44 13
%250 = OpFMul  %5  %247 %249
%251 = OpFAdd  %5  %246 %250
OpLine %3 44 9
OpStore %214 %251
OpLine %3 45 13
%252 = OpLoad  %6  %213
%253 = OpMatrixTimesVector  %6  %235 %252
OpLine %3 45 13
%254 = OpVectorTimesScalar  %6  %253 %96
%255 = OpFAdd  %6  %254 %228
OpLine %3 45 9
OpStore %213 %255
OpLine %3 1 1
%256 = OpLoad  %5  %217
OpLine %3 46 13
%257 = OpFMul  %5  %256 %95
OpLine %3 46 9
OpStore %217 %257
OpBranch %245
%245 = OpLabel
OpBranch %239
%239 = OpLabel
OpLine %3 1 1
%258 = OpLoad  %8  %218
OpLine %3 43 43
%259 = OpIAdd  %8  %258 %34
OpLine %3 43 39
OpStore %218 %259
OpBranch %236
%237 = OpLabel
OpLine %3 1 1
%260 = OpLoad  %5  %214
OpReturnValue %260
OpFunctionEnd
%264 = OpFunction  %4  None %265
%262 = OpFunctionParameter  %6
%263 = OpFunctionParameter  %6
%261 = OpLabel
OpBranch %266
%266 = OpLabel
OpLine %3 77 9
%267 = OpCompositeExtract  %5  %262 0
%268 = OpCompositeExtract  %5  %263 0
%269 = OpCompositeExtract  %5  %263 1
OpLine %3 78 49
%270 = OpFunctionCall  %5  %223 %262
OpLine %3 76 12
%271 = OpExtInst  %5  %1 FMix %268 %269 %270
%272 = OpCompositeExtract  %5  %262 1
%273 = OpCompositeConstruct  %4  %267 %271 %272
OpReturnValue %273
OpFunctionEnd
%277 = OpFunction  %14  None %278
%275 = OpFunctionParameter  %6
%276 = OpFunctionParameter  %6
%274 = OpLabel
OpBranch %281
%281 = OpLabel
OpLine %3 84 13
%282 = OpFunctionCall  %4  %264 %275 %276
OpLine %3 86 29
%283 = OpCompositeConstruct  %6  %279 %94
%284 = OpFAdd  %6  %275 %283
OpLine %3 86 15
%285 = OpFunctionCall  %4  %264 %284 %276
OpLine %3 86 15
%286 = OpFSub  %4  %285 %282
OpLine %3 87 29
%287 = OpCompositeConstruct  %6  %94 %279
%288 = OpFAdd  %6  %275 %287
OpLine %3 87 15
%289 = OpFunctionCall  %4  %264 %288 %276
OpLine %3 87 15
%290 = OpFSub  %4  %289 %282
OpLine %3 88 29
%291 = OpCompositeConstruct  %6  %280 %94
%292 = OpFAdd  %6  %275 %291
OpLine %3 88 15
%293 = OpFunctionCall  %4  %264 %292 %276
OpLine %3 88 15
%294 = OpFSub  %4  %293 %282
OpLine %3 89 29
%295 = OpCompositeConstruct  %6  %94 %280
%296 = OpFAdd  %6  %275 %295
OpLine %3 89 15
%297 = OpFunctionCall  %4  %264 %296 %276
OpLine %3 89 15
%298 = OpFSub  %4  %297 %282
OpLine %3 91 14
%299 = OpExtInst  %4  %1 Cross %290 %286
%300 = OpExtInst  %4  %1 Normalize %299
OpLine %3 92 14
%301 = OpExtInst  %4  %1 Cross %298 %294
%302 = OpExtInst  %4  %1 Normalize %301
OpLine %3 94 14
%303 = OpFAdd  %4  %300 %302
OpLine %3 94 13
%304 = OpVectorTimesScalar  %4  %303 %95
OpLine %3 96 12
%305 = OpCompositeConstruct  %14  %282 %304
OpReturnValue %305
OpFunctionEnd
%310 = OpFunction  %6  None %311
%307 = OpFunctionParameter  %8
%308 = OpFunctionParameter  %10
%309 = OpFunctionParameter  %11
%306 = OpLabel
OpBranch %312
%312 = OpLabel
OpLine %3 101 9
%313 = OpConvertUToF  %5  %307
%314 = OpCompositeExtract  %8  %308 0
OpLine %3 101 9
%315 = OpIAdd  %8  %314 %34
%316 = OpConvertUToF  %5  %315
%317 = OpFRem  %5  %313 %316
%318 = OpCompositeExtract  %8  %308 0
OpLine %3 100 12
%319 = OpIAdd  %8  %318 %34
%320 = OpUDiv  %8  %307 %319
%321 = OpConvertUToF  %5  %320
%322 = OpCompositeConstruct  %6  %317 %321
%323 = OpConvertSToF  %6  %309
%324 = OpFAdd  %6  %322 %323
OpReturnValue %324
OpFunctionEnd
%327 = OpFunction  %4  None %328
%326 = OpFunctionParameter  %6
%325 = OpLabel
OpBranch %333
%333 = OpLabel
OpLine %3 270 9
%334 = OpFunctionCall  %5  %88 %326
OpLine %3 270 9
%335 = OpFMul  %5  %334 %95
OpLine %3 270 9
%336 = OpFAdd  %5  %335 %95
OpLine %3 271 17
%337 = OpCompositeConstruct  %6  %329 %330
%338 = OpFAdd  %6  %326 %337
OpLine %3 271 9
%339 = OpFunctionCall  %5  %88 %338
OpLine %3 271 9
%340 = OpFMul  %5  %339 %95
OpLine %3 271 9
%341 = OpFAdd  %5  %340 %95
OpLine %3 272 17
%342 = OpCompositeConstruct  %6  %331 %332
%343 = OpFAdd  %6  %326 %342
OpLine %3 272 9
%344 = OpFunctionCall  %5  %88 %343
OpLine %3 272 9
%345 = OpFMul  %5  %344 %95
OpLine %3 269 12
%346 = OpFAdd  %5  %345 %95
%347 = OpCompositeConstruct  %4  %336 %341 %346
OpReturnValue %347
OpFunctionEnd
%352 = OpFunction  %2  None %353
%348 = OpLabel
%351 = OpLoad  %19  %349
%355 = OpAccessChain  %354  %40 %33
OpBranch %357
%357 = OpLabel
OpLine %3 111 22
%358 = OpCompositeExtract  %8  %351 0
OpLine %3 113 36
%360 = OpAccessChain  %359  %355 %33
%361 = OpLoad  %10  %360
OpLine %3 113 59
%363 = OpAccessChain  %362  %355 %34
%364 = OpLoad  %11  %363
OpLine %3 113 13
%365 = OpFunctionCall  %6  %310 %358 %361 %364
OpLine %3 115 5
OpLine %3 115 51
%369 = OpAccessChain  %368  %355 %35
%370 = OpLoad  %6  %369
OpLine %3 115 33
%371 = OpFunctionCall  %14  %277 %365 %370
OpLine %3 115 5
%372 = OpAccessChain  %367  %43 %33 %358
OpStore %372 %371
OpLine %3 118 23
%373 = OpCompositeExtract  %8  %351 0
OpLine %3 118 23
%374 = OpIMul  %8  %373 %356
OpLine %3 120 25
%376 = OpAccessChain  %375  %355 %33 %33
%377 = OpLoad  %8  %376
OpLine %3 120 25
%378 = OpAccessChain  %375  %355 %33 %34
%379 = OpLoad  %8  %378
%380 = OpIMul  %8  %377 %379
OpLine %3 120 9
%381 = OpIMul  %8  %380 %356
%382 = OpUGreaterThanEqual  %118  %374 %381
OpLine %3 120 5
OpSelectionMerge %383 None
OpBranchConditional %382 %384 %383
%384 = OpLabel
OpReturn
%383 = OpLabel
OpLine %3 122 28
%385 = OpCompositeExtract  %8  %351 0
OpLine %3 122 15
%386 = OpAccessChain  %375  %355 %33 %33
%387 = OpLoad  %8  %386
%388 = OpUDiv  %8  %385 %387
%389 = OpIAdd  %8  %358 %388
OpLine %3 123 15
%390 = OpIAdd  %8  %389 %34
OpLine %3 124 15
%391 = OpAccessChain  %375  %355 %33 %33
%392 = OpLoad  %8  %391
%393 = OpIAdd  %8  %389 %392
OpLine %3 124 15
%394 = OpIAdd  %8  %393 %34
OpLine %3 125 15
%395 = OpIAdd  %8  %394 %34
OpLine %3 127 5
OpLine %3 127 5
%398 = OpAccessChain  %397  %45 %33 %374
OpStore %398 %389
OpLine %3 128 5
OpLine %3 128 5
%399 = OpIAdd  %8  %374 %34
OpLine %3 128 5
%400 = OpAccessChain  %397  %45 %33 %399
OpStore %400 %394
OpLine %3 129 5
OpLine %3 129 5
%401 = OpIAdd  %8  %374 %35
OpLine %3 129 5
%402 = OpAccessChain  %397  %45 %33 %401
OpStore %402 %395
OpLine %3 130 5
OpLine %3 130 5
%403 = OpIAdd  %8  %374 %36
OpLine %3 130 5
%404 = OpAccessChain  %397  %45 %33 %403
OpStore %404 %389
OpLine %3 131 5
OpLine %3 131 5
%405 = OpIAdd  %8  %374 %37
OpLine %3 131 5
%406 = OpAccessChain  %397  %45 %33 %405
OpStore %406 %395
OpLine %3 132 5
OpLine %3 132 5
%407 = OpIAdd  %8  %374 %38
OpLine %3 132 5
%408 = OpAccessChain  %397  %45 %33 %407
OpStore %408 %390
OpReturn
OpFunctionEnd
%419 = OpFunction  %2  None %353
%409 = OpLabel
%412 = OpLoad  %8  %410
%421 = OpAccessChain  %420  %47 %33
OpBranch %423
%423 = OpLabel
OpLine %3 161 19
%424 = OpIAdd  %8  %412 %35
OpLine %3 161 18
%425 = OpUDiv  %8  %424 %36
OpLine %3 161 13
%426 = OpUMod  %8  %425 %35
%427 = OpConvertUToF  %5  %426
OpLine %3 162 19
%428 = OpIAdd  %8  %412 %34
OpLine %3 162 18
%429 = OpUDiv  %8  %428 %36
OpLine %3 162 13
%430 = OpUMod  %8  %429 %35
%431 = OpConvertUToF  %5  %430
OpLine %3 163 14
%432 = OpCompositeConstruct  %6  %427 %431
OpLine %3 165 30
%433 = OpVectorTimesScalar  %6  %432 %96
%434 = OpCompositeConstruct  %6  %422 %422
%435 = OpFAdd  %6  %434 %433
OpLine %3 165 20
%436 = OpCompositeConstruct  %7  %435 %94 %67
OpLine %3 168 21
%438 = OpAccessChain  %437  %421 %36
%439 = OpLoad  %8  %438
%440 = OpConvertUToF  %5  %439
%441 = OpFMul  %5  %427 %440
OpLine %3 168 17
%442 = OpAccessChain  %437  %421 %36
%443 = OpLoad  %8  %442
%444 = OpConvertUToF  %5  %443
%445 = OpFMul  %5  %431 %444
%446 = OpFAdd  %5  %441 %445
%447 = OpConvertFToU  %8  %446
OpLine %3 168 17
%448 = OpAccessChain  %437  %421 %37
%449 = OpLoad  %8  %448
%450 = OpIAdd  %8  %447 %449
OpLine %3 170 12
%451 = OpCompositeConstruct  %21  %450 %436 %432
%452 = OpCompositeExtract  %8  %451 0
OpStore %413 %452
%453 = OpCompositeExtract  %7  %451 1
OpStore %415 %453
%454 = OpCompositeExtract  %6  %451 2
OpStore %417 %454
OpReturn
OpFunctionEnd
%469 = OpFunction  %2  None %353
%457 = OpLabel
%455 = OpVariable  %215  Function %216
%456 = OpVariable  %219  Function %220
%460 = OpLoad  %8  %459
%463 = OpLoad  %7  %461
%466 = OpLoad  %6  %464
%458 = OpCompositeConstruct  %21  %460 %463 %466
%470 = OpAccessChain  %420  %47 %33
OpBranch %472
%472 = OpLabel
OpLine %3 181 17
%473 = OpCompositeExtract  %6  %458 2
%474 = OpCompositeExtract  %5  %473 0
OpLine %3 181 17
%475 = OpAccessChain  %437  %470 %36
%476 = OpLoad  %8  %475
%477 = OpConvertUToF  %5  %476
%478 = OpFMul  %5  %474 %477
%479 = OpCompositeExtract  %6  %458 2
%480 = OpCompositeExtract  %5  %479 1
OpLine %3 181 70
%481 = OpAccessChain  %437  %470 %36
%482 = OpLoad  %8  %481
OpLine %3 181 13
%483 = OpAccessChain  %437  %470 %36
%484 = OpLoad  %8  %483
%485 = OpIMul  %8  %482 %484
%486 = OpConvertUToF  %5  %485
%487 = OpFMul  %5  %480 %486
%488 = OpFAdd  %5  %478 %487
%489 = OpConvertFToU  %8  %488
OpLine %3 181 13
%490 = OpAccessChain  %437  %470 %37
%491 = OpLoad  %8  %490
%492 = OpIAdd  %8  %489 %491
OpLine %3 182 32
%493 = OpConvertUToF  %5  %492
OpLine %3 182 22
%494 = OpFDiv  %5  %493 %471
%495 = OpExtInst  %5  %1 Floor %494
%496 = OpConvertFToU  %8  %495
OpLine %3 183 22
%497 = OpUMod  %8  %492 %356
OpLine %3 185 36
%498 = OpAccessChain  %359  %470 %33
%499 = OpLoad  %10  %498
OpLine %3 185 57
%500 = OpAccessChain  %362  %470 %34
%501 = OpLoad  %11  %500
OpLine %3 185 13
%502 = OpFunctionCall  %6  %310 %496 %499 %501
OpLine %3 186 31
%503 = OpAccessChain  %368  %470 %35
%504 = OpLoad  %6  %503
OpLine %3 186 13
%505 = OpFunctionCall  %14  %277 %502 %504
OpLine %3 188 5
OpStore %455 %94
OpLine %3 190 5
OpSelectionMerge %506 None
OpSwitch %497 %513 0 %507 1 %508 2 %509 3 %510 4 %511 5 %512
%507 = OpLabel
OpLine %3 191 37
%514 = OpCompositeExtract  %4  %505 0
%515 = OpCompositeExtract  %5  %514 0
OpLine %3 191 20
OpStore %455 %515
OpBranch %506
%508 = OpLabel
OpLine %3 192 37
%516 = OpCompositeExtract  %4  %505 0
%517 = OpCompositeExtract  %5  %516 1
OpLine %3 192 20
OpStore %455 %517
OpBranch %506
%509 = OpLabel
OpLine %3 193 37
%518 = OpCompositeExtract  %4  %505 0
%519 = OpCompositeExtract  %5  %518 2
OpLine %3 193 20
OpStore %455 %519
OpBranch %506
%510 = OpLabel
OpLine %3 194 37
%520 = OpCompositeExtract  %4  %505 1
%521 = OpCompositeExtract  %5  %520 0
OpLine %3 194 20
OpStore %455 %521
OpBranch %506
%511 = OpLabel
OpLine %3 195 37
%522 = OpCompositeExtract  %4  %505 1
%523 = OpCompositeExtract  %5  %522 1
OpLine %3 195 20
OpStore %455 %523
OpBranch %506
%512 = OpLabel
OpLine %3 196 37
%524 = OpCompositeExtract  %4  %505 1
%525 = OpCompositeExtract  %5  %524 2
OpLine %3 196 20
OpStore %455 %525
OpBranch %506
%513 = OpLabel
OpBranch %506
%506 = OpLabel
OpLine %3 200 15
%526 = OpAccessChain  %375  %470 %33 %33
%527 = OpLoad  %8  %526
%528 = OpUDiv  %8  %496 %527
%529 = OpIAdd  %8  %496 %528
OpLine %3 201 15
%530 = OpIAdd  %8  %529 %34
OpLine %3 202 15
%531 = OpAccessChain  %375  %470 %33 %33
%532 = OpLoad  %8  %531
%533 = OpIAdd  %8  %529 %532
OpLine %3 202 15
%534 = OpIAdd  %8  %533 %34
OpLine %3 203 15
%535 = OpIAdd  %8  %534 %34
OpLine %3 205 5
OpStore %456 %33
OpLine %3 206 5
OpSelectionMerge %536 None
OpSwitch %497 %541 0 %537 3 %537 2 %538 4 %538 1 %539 5 %540
%537 = OpLabel
OpLine %3 207 24
OpStore %456 %529
OpBranch %536
%538 = OpLabel
OpLine %3 208 24
OpStore %456 %535
OpBranch %536
%539 = OpLabel
OpLine %3 209 20
OpStore %456 %534
OpBranch %536
%540 = OpLabel
OpLine %3 210 20
OpStore %456 %530
OpBranch %536
%541 = OpLabel
OpBranch %536
%536 = OpLabel
OpLine %3 213 13
%542 = OpCompositeExtract  %8  %458 0
OpLine %3 213 5
OpStore %456 %542
OpLine %3 222 27
%543 = OpLoad  %5  %455
%544 = OpBitcast  %8  %543
OpLine %3 223 12
%545 = OpLoad  %8  %456
%546 = OpCompositeConstruct  %22  %544 %545
%547 = OpCompositeExtract  %8  %546 0
OpStore %467 %547
%548 = OpCompositeExtract  %8  %546 1
OpStore %468 %548
OpReturn
OpFunctionEnd
%560 = OpFunction  %2  None %353
%549 = OpLabel
%553 = OpLoad  %4  %551
%555 = OpLoad  %4  %554
%550 = OpCompositeConstruct  %14  %553 %555
%562 = OpAccessChain  %561  %50 %33
OpBranch %563
%563 = OpLabel
OpLine %3 254 25
%565 = OpAccessChain  %564  %562 %34
%566 = OpLoad  %23  %565
%567 = OpCompositeExtract  %4  %550 0
OpLine %3 254 25
%568 = OpCompositeConstruct  %7  %567 %67
%569 = OpMatrixTimesVector  %7  %566 %568
OpLine %3 255 18
%570 = OpCompositeExtract  %4  %550 1
OpLine %3 256 12
%571 = OpCompositeExtract  %4  %550 0
%572 = OpCompositeConstruct  %26  %569 %570 %571
%573 = OpCompositeExtract  %7  %572 0
OpStore %556 %573
%574 = OpCompositeExtract  %4  %572 1
OpStore %557 %574
%575 = OpCompositeExtract  %4  %572 2
OpStore %559 %575
OpReturn
OpFunctionEnd
%586 = OpFunction  %2  None %353
%577 = OpLabel
%576 = OpVariable  %84  Function %85
%580 = OpLoad  %7  %579
%582 = OpLoad  %4  %581
%584 = OpLoad  %4  %583
%578 = OpCompositeConstruct  %26  %580 %582 %584
%587 = OpAccessChain  %561  %50 %33
%589 = OpAccessChain  %588  %53 %33
OpBranch %592
%592 = OpLabel
OpLine %3 278 28
%593 = OpCompositeConstruct  %4  %94 %94 %94
OpLine %3 278 17
%594 = OpCompositeConstruct  %4  %279 %279 %279
%595 = OpCompositeExtract  %4  %578 2
%596 = OpExtInst  %4  %1 Fract %595
%597 = OpExtInst  %4  %1 SmoothStep %593 %594 %596
OpLine %3 278 5
OpStore %576 %597
OpLine %3 279 17
%598 = OpCompositeConstruct  %4  %95 %279 %590
OpLine %3 279 13
%599 = OpCompositeConstruct  %4  %591 %591 %591
%600 = OpAccessChain  %132  %576 %33
%601 = OpLoad  %5  %600
%602 = OpAccessChain  %132  %576 %34
%603 = OpLoad  %5  %602
%604 = OpFMul  %5  %601 %603
%605 = OpAccessChain  %132  %576 %35
%606 = OpLoad  %5  %605
%607 = OpFMul  %5  %604 %606
%608 = OpCompositeConstruct  %4  %607 %607 %607
%609 = OpExtInst  %4  %1 FMix %598 %599 %608
OpLine %3 279 5
OpStore %576 %609
OpLine %3 282 25
%611 = OpAccessChain  %610  %589 %34
%612 = OpLoad  %4  %611
%613 = OpVectorTimesScalar  %4  %612 %279
OpLine %3 284 21
%614 = OpAccessChain  %610  %589 %33
%615 = OpLoad  %4  %614
%616 = OpCompositeExtract  %4  %578 2
%617 = OpFSub  %4  %615 %616
%618 = OpExtInst  %4  %1 Normalize %617
OpLine %3 285 20
%620 = OpAccessChain  %619  %587 %33
%621 = OpLoad  %7  %620
%622 = OpVectorShuffle  %4  %621 %621 0 1 2
%623 = OpCompositeExtract  %4  %578 2
%624 = OpFSub  %4  %622 %623
%625 = OpExtInst  %4  %1 Normalize %624
OpLine %3 286 20
%626 = OpFAdd  %4  %625 %618
%627 = OpExtInst  %4  %1 Normalize %626
OpLine %3 288 32
%628 = OpCompositeExtract  %4  %578 1
%629 = OpDot  %5  %628 %618
OpLine %3 288 28
%630 = OpExtInst  %5  %1 FMax %629 %94
OpLine %3 289 25
%631 = OpAccessChain  %610  %589 %34
%632 = OpLoad  %4  %631
%633 = OpVectorTimesScalar  %4  %632 %630
OpLine %3 291 37
%634 = OpCompositeExtract  %4  %578 1
%635 = OpDot  %5  %634 %627
OpLine %3 291 33
%636 = OpExtInst  %5  %1 FMax %635 %94
OpLine %3 291 29
%637 = OpExtInst  %5  %1 Pow %636 %330
OpLine %3 292 26
%638 = OpAccessChain  %610  %589 %34
%639 = OpLoad  %4  %638
%640 = OpVectorTimesScalar  %4  %639 %637
OpLine %3 294 18
%641 = OpFAdd  %4  %613 %633
%642 = OpFAdd  %4  %641 %640
%643 = OpLoad  %4  %576
%644 = OpFMul  %4  %642 %643
OpLine %3 296 12
%645 = OpCompositeConstruct  %7  %644 %67
OpStore %585 %645
OpReturn
OpFunctionEnd