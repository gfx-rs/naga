; SPIR-V
; Version: 1.1
; Generator: rspirv
; Bound: 643
OpCapability Shader
OpExtension "SPV_KHR_storage_buffer_storage_class"
%1 = OpExtInstImport "GLSL.std.450"
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %349 "gen_terrain_compute" %346
OpEntryPoint Vertex %416 "gen_terrain_vertex" %407 %410 %412 %414
OpEntryPoint Fragment %464 "gen_terrain_fragment" %454 %456 %459 %462 %463
OpEntryPoint Vertex %557 "vs_main" %548 %551 %553 %554 %556
OpEntryPoint Fragment %582 "fs_main" %575 %577 %579 %581
OpExecutionMode %349 LocalSize 64 1 1
OpExecutionMode %464 OriginUpperLeft
OpExecutionMode %582 OriginUpperLeft
%3 = OpString "debug-symbol-terrain"
OpSource Unknown 0 %3 "// Taken from https://github.com/sotrh/learn-wgpu/blob/11820796f5e1dbce42fb1119f04ddeb4b167d2a0/code/intermediate/tutorial13-terrain/src/terrain.wgsl
// ============================
// Terrain Generation
// ============================

// https://gist.github.com/munrocket/236ed5ba7e409b8bdf1ff6eca5dcdc39
//  MIT License. Â© Ian McEwan, Stefan Gustavson, Munrocket
// - Less condensed glsl implementation with comments can be found at https://weber.itn.liu.se/~stegu/jgt2012/article.pdf

fn permute3(x: vec3<f32>) -> vec3<f32> { return (((x * 34.) + 1.) * x) % vec3<f32>(289.); }

fn snoise2(v: vec2<f32>) -> f32 {
    let C = vec4<f32>(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439);
    var i: vec2<f32> = floor(v + dot(v, C.yy));
    let x0 = v - i + dot(i, C.xx);
    // I flipped the condition here from > to < as it fixed some artifacting I was observing
    var i1: vec2<f32> = select(vec2<f32>(1., 0.), vec2<f32>(0., 1.), (x0.x < x0.y));
    var x12: vec4<f32> = x0.xyxy + C.xxzz - vec4<f32>(i1, 0., 0.);
    i = i % vec2<f32>(289.);
    let p = permute3(permute3(i.y + vec3<f32>(0., i1.y, 1.)) + i.x + vec3<f32>(0., i1.x, 1.));
    var m: vec3<f32> = max(0.5 - vec3<f32>(dot(x0, x0), dot(x12.xy, x12.xy), dot(x12.zw, x12.zw)), vec3<f32>(0.));
    m = m * m;
    m = m * m;
    let x = 2. * fract(p * C.www) - 1.;
    let h = abs(x) - 0.5;
    let ox = floor(x + 0.5);
    let a0 = x - ox;
    m = m * (1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h));
    let g = vec3<f32>(a0.x * x0.x + h.x * x0.y, a0.yz * x12.xz + h.yz * x12.yw);
    return 130. * dot(m, g);
}


fn fbm(p: vec2<f32>) -> f32 {
    let NUM_OCTAVES: u32 = 5u;
    var x = p * 0.01;
    var v = 0.0;
    var a = 0.5;
    let shift = vec2<f32>(100.0);
    let cs = vec2<f32>(cos(0.5), sin(0.5));
    let rot = mat2x2<f32>(cs.x, cs.y, -cs.y, cs.x);

    for (var i = 0u; i < NUM_OCTAVES; i = i + 1u) {
        v = v + a * snoise2(x);
        x = rot * x * 2.0 + shift;
        a = a * 0.5;
    }

    return v;
}

struct ChunkData {
    chunk_size: vec2<u32>,
    chunk_corner: vec2<i32>,
    min_max_height: vec2<f32>,
}

struct Vertex {
    @location(0) position: vec3<f32>,
    @location(1) normal: vec3<f32>,
}

struct VertexBuffer {
    data: array<Vertex>, // stride: 32
}

struct IndexBuffer {
    data: array<u32>,
}

@group(0) @binding(0) var<uniform> chunk_data: ChunkData;
@group(0) @binding(1) var<storage, read_write> vertices: VertexBuffer;
@group(0) @binding(2) var<storage, read_write> indices: IndexBuffer;

fn terrain_point(p: vec2<f32>, min_max_height: vec2<f32>) -> vec3<f32> {
    return vec3<f32>(
        p.x,
        mix(min_max_height.x, min_max_height.y, fbm(p)),
        p.y,
    );
}

fn terrain_vertex(p: vec2<f32>, min_max_height: vec2<f32>) -> Vertex {
    let v = terrain_point(p, min_max_height);

    let tpx = terrain_point(p + vec2<f32>(0.1, 0.0), min_max_height) - v;
    let tpz = terrain_point(p + vec2<f32>(0.0, 0.1), min_max_height) - v;
    let tnx = terrain_point(p + vec2<f32>(-0.1, 0.0), min_max_height) - v;
    let tnz = terrain_point(p + vec2<f32>(0.0, -0.1), min_max_height) - v;

    let pn = normalize(cross(tpz, tpx));
    let nn = normalize(cross(tnz, tnx));

    let n = (pn + nn) * 0.5;

    return Vertex(v, n);
}

fn index_to_p(vert_index: u32, chunk_size: vec2<u32>, chunk_corner: vec2<i32>) -> vec2<f32> {
    return vec2(
        f32(vert_index) % f32(chunk_size.x + 1u),
        f32(vert_index / (chunk_size.x + 1u)),
    ) + vec2<f32>(chunk_corner);
}

@compute @workgroup_size(64)
fn gen_terrain_compute(
    @builtin(global_invocation_id) gid: vec3<u32>
) {
    // Create vert_component
    let vert_index = gid.x;

    let p = index_to_p(vert_index, chunk_data.chunk_size, chunk_data.chunk_corner);

    vertices.data[vert_index] = terrain_vertex(p, chunk_data.min_max_height);

    // Create indices
    let start_index = gid.x * 6u; // using TriangleList

    if (start_index >= (chunk_data.chunk_size.x * chunk_data.chunk_size.y * 6u)) { return; }

    let v00 = vert_index + gid.x / chunk_data.chunk_size.x;
    let v10 = v00 + 1u;
    let v01 = v00 + chunk_data.chunk_size.x + 1u;
    let v11 = v01 + 1u;

    indices.data[start_index] = v00;
    indices.data[start_index + 1u] = v01;
    indices.data[start_index + 2u] = v11;
    indices.data[start_index + 3u] = v00;
    indices.data[start_index + 4u] = v11;
    indices.data[start_index + 5u] = v10;
}

// ============================
// Terrain Gen (Fragment Shader)
// ============================

struct GenData {
    chunk_size: vec2<u32>,
    chunk_corner: vec2<i32>,
    min_max_height: vec2<f32>,
    texture_size: u32,
    start_index: u32,
}
@group(0)
@binding(0)
var<uniform> gen_data: GenData;

struct GenVertexOutput {
    @location(0)
    index: u32,
    @builtin(position)
    position: vec4<f32>,
    @location(1)
    uv: vec2<f32>,
};

@vertex
fn gen_terrain_vertex(@builtin(vertex_index) vindex: u32) -> GenVertexOutput {
    let u = f32(((vindex + 2u) / 3u) % 2u);
    let v = f32(((vindex + 1u) / 3u) % 2u);
    let uv = vec2<f32>(u, v);

    let position = vec4<f32>(-1.0 + uv * 2.0, 0.0, 1.0);

    // TODO: maybe replace this with u32(dot(uv, vec2(f32(gen_data.texture_dim.x))))
    let index = u32(uv.x * f32(gen_data.texture_size) + uv.y * f32(gen_data.texture_size)) + gen_data.start_index;

    return GenVertexOutput(index, position, uv);
}


struct GenFragmentOutput {
    @location(0) vert_component: u32,
    @location(1) index: u32,
}

@fragment
fn gen_terrain_fragment(in: GenVertexOutput) -> GenFragmentOutput {
    let i = u32(in.uv.x * f32(gen_data.texture_size) + in.uv.y * f32(gen_data.texture_size * gen_data.texture_size)) + gen_data.start_index;
    let vert_index = u32(floor(f32(i) / 6.));
    let comp_index = i % 6u;

    let p = index_to_p(vert_index, gen_data.chunk_size, gen_data.chunk_corner);
    let v = terrain_vertex(p, gen_data.min_max_height);

    var vert_component: f32 = 0.;
    
    switch comp_index {
        case 0u: { vert_component = v.position.x; }
        case 1u: { vert_component = v.position.y; }
        case 2u: { vert_component = v.position.z; }
        case 3u: { vert_component = v.normal.x; }
        case 4u: { vert_component = v.normal.y; }
        case 5u: { vert_component = v.normal.z; }
        default: {}
    }

    let v00 = vert_index + vert_index / gen_data.chunk_size.x;
    let v10 = v00 + 1u;
    let v01 = v00 + gen_data.chunk_size.x + 1u;
    let v11 = v01 + 1u;

    var index = 0u;
    switch comp_index {
        case 0u, 3u: { index = v00; }
        case 2u, 4u: { index = v11; }
        case 1u: { index = v01; }
        case 5u: { index = v10; }
        default: {}
    }
    index = in.index;
    // index = gen_data.start_index;
    // indices.data[start_index] = v00;
    // indices.data[start_index + 1u] = v01;
    // indices.data[start_index + 2u] = v11;
    // indices.data[start_index + 3u] = v00;
    // indices.data[start_index + 4u] = v11;
    // indices.data[start_index + 5u] = v10;

    let ivert_component = bitcast<u32>(vert_component);
    return GenFragmentOutput(ivert_component, index);
}

// ============================
// Terrain Rendering
// ============================

struct Camera {
    view_pos: vec4<f32>,
    view_proj: mat4x4<f32>,
}
@group(0) @binding(0)
var<uniform> camera: Camera;

struct Light {
    position: vec3<f32>,
    color: vec3<f32>,
}
@group(1) @binding(0)
var<uniform> light: Light;

struct VertexOutput {
    @builtin(position) clip_position: vec4<f32>,
    @location(0) normal: vec3<f32>,
    @location(1) world_pos: vec3<f32>,
}

@vertex
fn vs_main(
    vertex: Vertex,
) -> VertexOutput {
    let clip_position = camera.view_proj * vec4<f32>(vertex.position, 1.);
    let normal = vertex.normal;
    return VertexOutput(clip_position, normal, vertex.position);
}

@group(2) @binding(0)
var t_diffuse: texture_2d<f32>;
@group(2) @binding(1)
var s_diffuse: sampler;
@group(2) @binding(2)
var t_normal: texture_2d<f32>;
@group(2) @binding(3)
var s_normal: sampler;

fn color23(p: vec2<f32>) -> vec3<f32> {
    return vec3<f32>(
        snoise2(p) * 0.5 + 0.5,
        snoise2(p + vec2<f32>(23., 32.)) * 0.5 + 0.5,
        snoise2(p + vec2<f32>(-43., 3.)) * 0.5 + 0.5,
    );
}

@fragment
fn fs_main(in: VertexOutput) -> @location(0) vec4<f32> {
    var color = smoothstep(vec3<f32>(0.0), vec3<f32>(0.1), fract(in.world_pos));
    color = mix(vec3<f32>(0.5, 0.1, 0.7), vec3<f32>(0.2, 0.2, 0.2), vec3<f32>(color.x * color.y * color.z));

    let ambient_strength = 0.1;
    let ambient_color = light.color * ambient_strength;

    let light_dir = normalize(light.position - in.world_pos);
    let view_dir = normalize(camera.view_pos.xyz - in.world_pos);
    let half_dir = normalize(view_dir + light_dir);

    let diffuse_strength = max(dot(in.normal, light_dir), 0.0);
    let diffuse_color = diffuse_strength * light.color;

    let specular_strength = pow(max(dot(in.normal, half_dir), 0.0), 32.0);
    let specular_color = specular_strength * light.color;

    let result = (ambient_color + diffuse_color + specular_color) * color;

    return vec4<f32>(result, 1.0);
}"
OpMemberName %13 0 "chunk_size"
OpMemberName %13 1 "chunk_corner"
OpMemberName %13 2 "min_max_height"
OpName %13 "ChunkData"
OpMemberName %14 0 "position"
OpMemberName %14 1 "normal"
OpName %14 "Vertex"
OpMemberName %16 0 "data"
OpName %16 "VertexBuffer"
OpMemberName %18 0 "data"
OpName %18 "IndexBuffer"
OpMemberName %20 0 "chunk_size"
OpMemberName %20 1 "chunk_corner"
OpMemberName %20 2 "min_max_height"
OpMemberName %20 3 "texture_size"
OpMemberName %20 4 "start_index"
OpName %20 "GenData"
OpMemberName %21 0 "index"
OpMemberName %21 1 "position"
OpMemberName %21 2 "uv"
OpName %21 "GenVertexOutput"
OpMemberName %22 0 "vert_component"
OpMemberName %22 1 "index"
OpName %22 "GenFragmentOutput"
OpMemberName %24 0 "view_pos"
OpMemberName %24 1 "view_proj"
OpName %24 "Camera"
OpMemberName %25 0 "position"
OpMemberName %25 1 "color"
OpName %25 "Light"
OpMemberName %26 0 "clip_position"
OpMemberName %26 1 "normal"
OpMemberName %26 2 "world_pos"
OpName %26 "VertexOutput"
OpName %40 "chunk_data"
OpName %43 "vertices"
OpName %45 "indices"
OpName %47 "gen_data"
OpName %50 "camera"
OpName %53 "light"
OpName %56 "t_diffuse"
OpName %58 "s_diffuse"
OpName %60 "t_normal"
OpName %61 "s_normal"
OpName %63 "x"
OpName %64 "permute3"
OpName %77 "v"
OpName %78 "snoise2"
OpName %101 "i"
OpName %104 "i1"
OpName %106 "x12"
OpName %109 "m"
OpName %212 "p"
OpName %213 "fbm"
OpName %217 "x"
OpName %219 "v"
OpName %221 "a"
OpName %222 "i"
OpName %259 "p"
OpName %260 "min_max_height"
OpName %261 "terrain_point"
OpName %272 "p"
OpName %273 "min_max_height"
OpName %274 "terrain_vertex"
OpName %304 "vert_index"
OpName %305 "chunk_size"
OpName %306 "chunk_corner"
OpName %307 "index_to_p"
OpName %323 "p"
OpName %324 "color23"
OpName %346 "gid"
OpName %349 "gen_terrain_compute"
OpName %407 "vindex"
OpName %410 "index"
OpName %412 "position"
OpName %414 "uv"
OpName %416 "gen_terrain_vertex"
OpName %454 "index"
OpName %456 "position"
OpName %459 "uv"
OpName %462 "vert_component"
OpName %463 "index"
OpName %464 "gen_terrain_fragment"
OpName %467 "vert_component"
OpName %468 "index"
OpName %548 "position"
OpName %551 "normal"
OpName %553 "clip_position"
OpName %554 "normal"
OpName %556 "world_pos"
OpName %557 "vs_main"
OpName %575 "clip_position"
OpName %577 "normal"
OpName %579 "world_pos"
OpName %582 "fs_main"
OpName %591 "color"
OpMemberDecorate %13 0 Offset 0
OpMemberDecorate %13 1 Offset 8
OpMemberDecorate %13 2 Offset 16
OpMemberDecorate %14 0 Offset 0
OpMemberDecorate %14 1 Offset 16
OpDecorate %15 ArrayStride 32
OpMemberDecorate %16 0 Offset 0
OpDecorate %16 Block
OpDecorate %17 ArrayStride 4
OpMemberDecorate %18 0 Offset 0
OpDecorate %18 Block
OpMemberDecorate %20 0 Offset 0
OpMemberDecorate %20 1 Offset 8
OpMemberDecorate %20 2 Offset 16
OpMemberDecorate %20 3 Offset 24
OpMemberDecorate %20 4 Offset 28
OpMemberDecorate %21 0 Offset 0
OpMemberDecorate %21 1 Offset 16
OpMemberDecorate %21 2 Offset 32
OpMemberDecorate %22 0 Offset 0
OpMemberDecorate %22 1 Offset 4
OpMemberDecorate %24 0 Offset 0
OpMemberDecorate %24 1 Offset 16
OpMemberDecorate %24 1 ColMajor
OpMemberDecorate %24 1 MatrixStride 16
OpMemberDecorate %25 0 Offset 0
OpMemberDecorate %25 1 Offset 16
OpMemberDecorate %26 0 Offset 0
OpMemberDecorate %26 1 Offset 16
OpMemberDecorate %26 2 Offset 32
OpDecorate %40 DescriptorSet 0
OpDecorate %40 Binding 0
OpDecorate %41 Block
OpMemberDecorate %41 0 Offset 0
OpDecorate %43 DescriptorSet 0
OpDecorate %43 Binding 1
OpDecorate %45 DescriptorSet 0
OpDecorate %45 Binding 2
OpDecorate %47 DescriptorSet 0
OpDecorate %47 Binding 0
OpDecorate %48 Block
OpMemberDecorate %48 0 Offset 0
OpDecorate %50 DescriptorSet 0
OpDecorate %50 Binding 0
OpDecorate %51 Block
OpMemberDecorate %51 0 Offset 0
OpDecorate %53 DescriptorSet 1
OpDecorate %53 Binding 0
OpDecorate %54 Block
OpMemberDecorate %54 0 Offset 0
OpDecorate %56 DescriptorSet 2
OpDecorate %56 Binding 0
OpDecorate %58 DescriptorSet 2
OpDecorate %58 Binding 1
OpDecorate %60 DescriptorSet 2
OpDecorate %60 Binding 2
OpDecorate %61 DescriptorSet 2
OpDecorate %61 Binding 3
OpDecorate %346 BuiltIn GlobalInvocationId
OpDecorate %407 BuiltIn VertexIndex
OpDecorate %410 Location 0
OpDecorate %410 Flat
OpDecorate %412 BuiltIn Position
OpDecorate %414 Location 1
OpDecorate %454 Location 0
OpDecorate %454 Flat
OpDecorate %456 BuiltIn FragCoord
OpDecorate %459 Location 1
OpDecorate %462 Location 0
OpDecorate %463 Location 1
OpDecorate %548 Location 0
OpDecorate %551 Location 1
OpDecorate %553 BuiltIn Position
OpDecorate %554 Location 0
OpDecorate %556 Location 1
OpDecorate %575 BuiltIn FragCoord
OpDecorate %577 Location 0
OpDecorate %579 Location 1
OpDecorate %581 Location 0
%2 = OpTypeVoid
%5 = OpTypeFloat 32
%4 = OpTypeVector %5 3
%6 = OpTypeVector %5 2
%7 = OpTypeVector %5 4
%8 = OpTypeInt 32 0
%9 = OpTypeMatrix %6 2
%10 = OpTypeVector %8 2
%12 = OpTypeInt 32 1
%11 = OpTypeVector %12 2
%13 = OpTypeStruct %10 %11 %6
%14 = OpTypeStruct %4 %4
%15 = OpTypeRuntimeArray %14
%16 = OpTypeStruct %15
%17 = OpTypeRuntimeArray %8
%18 = OpTypeStruct %17
%19 = OpTypeVector %8 3
%20 = OpTypeStruct %10 %11 %6 %8 %8
%21 = OpTypeStruct %8 %7 %6
%22 = OpTypeStruct %8 %8
%23 = OpTypeMatrix %7 4
%24 = OpTypeStruct %7 %23
%25 = OpTypeStruct %4 %4
%26 = OpTypeStruct %7 %4 %4
%27 = OpTypeImage %5 2D 0 0 0 1 Unknown
%28 = OpTypeSampler
%29 = OpConstant  %12  0
%30 = OpConstant  %12  1
%31 = OpConstant  %12  2
%32 = OpConstant  %12  64
%33 = OpConstant  %8  0
%34 = OpConstant  %8  1
%35 = OpConstant  %8  2
%36 = OpConstant  %8  3
%37 = OpConstant  %8  4
%38 = OpConstant  %8  5
%39 = OpConstant  %12  3
%41 = OpTypeStruct %13
%42 = OpTypePointer Uniform %41
%40 = OpVariable  %42  Uniform
%44 = OpTypePointer StorageBuffer %16
%43 = OpVariable  %44  StorageBuffer
%46 = OpTypePointer StorageBuffer %18
%45 = OpVariable  %46  StorageBuffer
%48 = OpTypeStruct %20
%49 = OpTypePointer Uniform %48
%47 = OpVariable  %49  Uniform
%51 = OpTypeStruct %24
%52 = OpTypePointer Uniform %51
%50 = OpVariable  %52  Uniform
%54 = OpTypeStruct %25
%55 = OpTypePointer Uniform %54
%53 = OpVariable  %55  Uniform
%57 = OpTypePointer UniformConstant %27
%56 = OpVariable  %57  UniformConstant
%59 = OpTypePointer UniformConstant %28
%58 = OpVariable  %59  UniformConstant
%60 = OpVariable  %57  UniformConstant
%61 = OpVariable  %59  UniformConstant
%65 = OpTypeFunction %4 %4
%66 = OpConstant  %5  34.0
%67 = OpConstant  %5  1.0
%68 = OpConstantComposite  %4  %67 %67 %67
%69 = OpConstant  %5  289.0
%70 = OpConstantComposite  %4  %69 %69 %69
%79 = OpTypeFunction %5 %6
%80 = OpConstant  %5  0.21132487
%81 = OpConstant  %5  0.36602542
%82 = OpConstant  %5  -0.57735026
%83 = OpConstant  %5  0.024390243
%84 = OpConstantComposite  %7  %80 %81 %82 %83
%85 = OpConstantComposite  %6  %81 %81
%86 = OpConstantComposite  %6  %80 %80
%87 = OpConstant  %5  0.0
%88 = OpConstantComposite  %6  %67 %87
%89 = OpConstantComposite  %6  %87 %67
%90 = OpConstantComposite  %7  %80 %80 %82 %82
%91 = OpConstantComposite  %6  %69 %69
%92 = OpConstant  %5  0.5
%93 = OpConstantComposite  %4  %92 %92 %92
%94 = OpConstantComposite  %4  %87 %87 %87
%95 = OpConstant  %5  2.0
%96 = OpConstantComposite  %4  %83 %83 %83
%97 = OpConstant  %5  1.7928429
%98 = OpConstant  %5  0.85373473
%99 = OpConstantComposite  %4  %97 %97 %97
%100 = OpConstant  %5  130.0
%102 = OpTypePointer Function %6
%103 = OpConstantNull  %6
%105 = OpConstantNull  %6
%107 = OpTypePointer Function %7
%108 = OpConstantNull  %7
%110 = OpTypePointer Function %4
%111 = OpConstantNull  %4
%125 = OpTypeBool
%128 = OpTypeVector %125 2
%137 = OpTypePointer Function %5
%214 = OpConstant  %5  0.01
%215 = OpConstant  %5  100.0
%216 = OpConstantComposite  %6  %215 %215
%218 = OpConstantNull  %6
%220 = OpTypePointer Function %5
%223 = OpTypePointer Function %8
%262 = OpTypeFunction %4 %6 %6
%275 = OpTypeFunction %14 %6 %6
%276 = OpConstant  %5  0.1
%277 = OpConstantComposite  %6  %276 %87
%278 = OpConstantComposite  %6  %87 %276
%279 = OpConstant  %5  -0.1
%280 = OpConstantComposite  %6  %279 %87
%281 = OpConstantComposite  %6  %87 %279
%308 = OpTypeFunction %6 %8 %10 %11
%325 = OpTypeFunction %4 %6
%326 = OpConstant  %5  23.0
%327 = OpConstant  %5  32.0
%328 = OpConstantComposite  %6  %326 %327
%329 = OpConstant  %5  -43.0
%330 = OpConstant  %5  3.0
%331 = OpConstantComposite  %6  %329 %330
%347 = OpTypePointer Input %19
%346 = OpVariable  %347  Input
%350 = OpTypeFunction %2
%351 = OpTypePointer Uniform %13
%353 = OpConstant  %8  6
%356 = OpTypePointer Uniform %10
%359 = OpTypePointer Uniform %11
%363 = OpTypePointer StorageBuffer %15
%364 = OpTypePointer StorageBuffer %14
%365 = OpTypePointer Uniform %6
%372 = OpTypePointer Uniform %8
%393 = OpTypePointer StorageBuffer %17
%394 = OpTypePointer StorageBuffer %8
%408 = OpTypePointer Input %8
%407 = OpVariable  %408  Input
%411 = OpTypePointer Output %8
%410 = OpVariable  %411  Output
%413 = OpTypePointer Output %7
%412 = OpVariable  %413  Output
%415 = OpTypePointer Output %6
%414 = OpVariable  %415  Output
%417 = OpTypePointer Uniform %20
%419 = OpConstant  %5  -1.0
%420 = OpConstantComposite  %6  %419 %419
%434 = OpTypePointer Uniform %8
%454 = OpVariable  %408  Input
%457 = OpTypePointer Input %7
%456 = OpVariable  %457  Input
%460 = OpTypePointer Input %6
%459 = OpVariable  %460  Input
%462 = OpVariable  %411  Output
%463 = OpVariable  %411  Output
%466 = OpConstant  %5  6.0
%549 = OpTypePointer Input %4
%548 = OpVariable  %549  Input
%551 = OpVariable  %549  Input
%553 = OpVariable  %413  Output
%555 = OpTypePointer Output %4
%554 = OpVariable  %555  Output
%556 = OpVariable  %555  Output
%558 = OpTypePointer Uniform %24
%561 = OpTypePointer Uniform %23
%575 = OpVariable  %457  Input
%577 = OpVariable  %549  Input
%579 = OpVariable  %549  Input
%581 = OpVariable  %413  Output
%584 = OpTypePointer Uniform %25
%586 = OpConstantComposite  %4  %276 %276 %276
%587 = OpConstant  %5  0.7
%588 = OpConstantComposite  %4  %92 %276 %587
%589 = OpConstant  %5  0.2
%590 = OpConstantComposite  %4  %589 %589 %589
%592 = OpConstantNull  %4
%607 = OpTypePointer Uniform %4
%616 = OpTypePointer Uniform %7
%64 = OpFunction  %4  None %65
%63 = OpFunctionParameter  %4
%62 = OpLabel
OpBranch %71
%71 = OpLabel
OpLine %3 10 52
%72 = OpVectorTimesScalar  %4  %63 %66
OpLine %3 10 50
%73 = OpFAdd  %4  %72 %68
%74 = OpFMul  %4  %73 %63
OpLine %3 10 49
%75 = OpFRem  %4  %74 %70
OpReturnValue %75
OpFunctionEnd
%78 = OpFunction  %5  None %79
%77 = OpFunctionParameter  %6
%76 = OpLabel
%104 = OpVariable  %102  Function %105
%109 = OpVariable  %110  Function %111
%101 = OpVariable  %102  Function %103
%106 = OpVariable  %107  Function %108
OpBranch %112
%112 = OpLabel
OpLine %3 13 13
OpLine %3 14 24
%113 = OpDot  %5  %77 %85
%114 = OpCompositeConstruct  %6  %113 %113
%115 = OpFAdd  %6  %77 %114
%116 = OpExtInst  %6  %1 Floor %115
OpLine %3 14 5
OpStore %101 %116
OpLine %3 15 14
%117 = OpLoad  %6  %101
%118 = OpFSub  %6  %77 %117
%119 = OpLoad  %6  %101
%120 = OpDot  %5  %119 %86
%121 = OpCompositeConstruct  %6  %120 %120
%122 = OpFAdd  %6  %118 %121
OpLine %3 17 32
OpLine %3 17 25
%123 = OpCompositeExtract  %5  %122 0
%124 = OpCompositeExtract  %5  %122 1
%126 = OpFOrdLessThan  %125  %123 %124
%129 = OpCompositeConstruct  %128  %126 %126
%127 = OpSelect  %6  %129 %89 %88
OpLine %3 17 5
OpStore %104 %127
OpLine %3 18 26
%130 = OpVectorShuffle  %7  %122 %122 0 1 0 1
%131 = OpFAdd  %7  %130 %90
%132 = OpLoad  %6  %104
OpLine %3 18 26
%133 = OpCompositeConstruct  %7  %132 %87 %87
%134 = OpFSub  %7  %131 %133
OpLine %3 18 5
OpStore %106 %134
OpLine %3 1 1
%135 = OpLoad  %6  %101
OpLine %3 19 9
%136 = OpFRem  %6  %135 %91
OpLine %3 19 5
OpStore %101 %136
OpLine %3 20 31
%138 = OpAccessChain  %137  %101 %34
%139 = OpLoad  %5  %138
OpLine %3 20 51
%140 = OpAccessChain  %137  %104 %34
%141 = OpLoad  %5  %140
OpLine %3 20 31
%142 = OpCompositeConstruct  %4  %87 %141 %67
%143 = OpCompositeConstruct  %4  %139 %139 %139
%144 = OpFAdd  %4  %143 %142
OpLine %3 20 22
%145 = OpFunctionCall  %4  %64 %144
OpLine %3 20 22
%146 = OpAccessChain  %137  %101 %33
%147 = OpLoad  %5  %146
%148 = OpCompositeConstruct  %4  %147 %147 %147
%149 = OpFAdd  %4  %145 %148
OpLine %3 20 84
%150 = OpAccessChain  %137  %104 %33
%151 = OpLoad  %5  %150
OpLine %3 20 22
%152 = OpCompositeConstruct  %4  %87 %151 %67
%153 = OpFAdd  %4  %149 %152
OpLine %3 20 13
%154 = OpFunctionCall  %4  %64 %153
OpLine %3 21 28
%155 = OpDot  %5  %122 %122
%156 = OpLoad  %7  %106
%157 = OpVectorShuffle  %6  %156 %156 0 1
%158 = OpLoad  %7  %106
%159 = OpVectorShuffle  %6  %158 %158 0 1
%160 = OpDot  %5  %157 %159
%161 = OpLoad  %7  %106
%162 = OpVectorShuffle  %6  %161 %161 2 3
%163 = OpLoad  %7  %106
%164 = OpVectorShuffle  %6  %163 %163 2 3
%165 = OpDot  %5  %162 %164
%166 = OpCompositeConstruct  %4  %155 %160 %165
%167 = OpFSub  %4  %93 %166
OpLine %3 21 24
%168 = OpExtInst  %4  %1 FMax %167 %94
OpLine %3 21 5
OpStore %109 %168
OpLine %3 22 9
%169 = OpLoad  %4  %109
%170 = OpLoad  %4  %109
%171 = OpFMul  %4  %169 %170
OpLine %3 22 5
OpStore %109 %171
OpLine %3 23 9
%172 = OpLoad  %4  %109
%173 = OpLoad  %4  %109
%174 = OpFMul  %4  %172 %173
OpLine %3 23 5
OpStore %109 %174
OpLine %3 24 13
%175 = OpFMul  %4  %154 %96
%176 = OpExtInst  %4  %1 Fract %175
%177 = OpVectorTimesScalar  %4  %176 %95
OpLine %3 24 13
%178 = OpFSub  %4  %177 %68
OpLine %3 25 13
%179 = OpExtInst  %4  %1 FAbs %178
OpLine %3 25 13
%180 = OpFSub  %4  %179 %93
OpLine %3 26 14
%181 = OpFAdd  %4  %178 %93
%182 = OpExtInst  %4  %1 Floor %181
OpLine %3 27 14
%183 = OpFSub  %4  %178 %182
OpLine %3 1 1
%184 = OpLoad  %4  %109
OpLine %3 28 9
%185 = OpFMul  %4  %183 %183
%186 = OpFMul  %4  %180 %180
%187 = OpFAdd  %4  %185 %186
%188 = OpVectorTimesScalar  %4  %187 %98
%189 = OpFSub  %4  %99 %188
%190 = OpFMul  %4  %184 %189
OpLine %3 28 5
OpStore %109 %190
OpLine %3 29 13
%191 = OpCompositeExtract  %5  %183 0
%192 = OpCompositeExtract  %5  %122 0
%193 = OpFMul  %5  %191 %192
%194 = OpCompositeExtract  %5  %180 0
%195 = OpCompositeExtract  %5  %122 1
%196 = OpFMul  %5  %194 %195
%197 = OpFAdd  %5  %193 %196
%198 = OpVectorShuffle  %6  %183 %183 1 2
%199 = OpLoad  %7  %106
%200 = OpVectorShuffle  %6  %199 %199 0 2
%201 = OpFMul  %6  %198 %200
%202 = OpVectorShuffle  %6  %180 %180 1 2
%203 = OpLoad  %7  %106
%204 = OpVectorShuffle  %6  %203 %203 1 3
%205 = OpFMul  %6  %202 %204
%206 = OpFAdd  %6  %201 %205
%207 = OpCompositeConstruct  %4  %197 %206
OpLine %3 30 12
%208 = OpLoad  %4  %109
%209 = OpDot  %5  %208 %207
%210 = OpFMul  %5  %100 %209
OpReturnValue %210
OpFunctionEnd
%213 = OpFunction  %5  None %79
%212 = OpFunctionParameter  %6
%211 = OpLabel
%219 = OpVariable  %220  Function %87
%222 = OpVariable  %223  Function %33
%217 = OpVariable  %102  Function %218
%221 = OpVariable  %220  Function %92
OpBranch %224
%224 = OpLabel
OpLine %3 36 13
%225 = OpVectorTimesScalar  %6  %212 %214
OpLine %3 36 5
OpStore %217 %225
OpLine %3 39 17
OpLine %3 40 24
%226 = OpExtInst  %5  %1 Cos %92
OpLine %3 40 14
%227 = OpExtInst  %5  %1 Sin %92
%228 = OpCompositeConstruct  %6  %226 %227
OpLine %3 41 15
%229 = OpFNegate  %5  %227
%230 = OpCompositeConstruct  %6  %226 %227
%231 = OpCompositeConstruct  %6  %229 %226
%232 = OpCompositeConstruct  %9  %230 %231
OpBranch %233
%233 = OpLabel
OpLine %3 43 5
OpLoopMerge %234 %236 None
OpBranch %235
%235 = OpLabel
OpLine %3 43 22
%237 = OpLoad  %8  %222
%238 = OpULessThan  %125  %237 %38
OpLine %3 43 21
OpSelectionMerge %239 None
OpBranchConditional %238 %239 %240
%240 = OpLabel
OpBranch %234
%239 = OpLabel
OpBranch %241
%241 = OpLabel
OpLine %3 1 1
%243 = OpLoad  %5  %219
%244 = OpLoad  %5  %221
%245 = OpLoad  %6  %217
OpLine %3 44 21
%246 = OpFunctionCall  %5  %78 %245
OpLine %3 44 13
%247 = OpFMul  %5  %244 %246
%248 = OpFAdd  %5  %243 %247
OpLine %3 44 9
OpStore %219 %248
OpLine %3 45 13
%249 = OpLoad  %6  %217
%250 = OpMatrixTimesVector  %6  %232 %249
OpLine %3 45 13
%251 = OpVectorTimesScalar  %6  %250 %95
%252 = OpFAdd  %6  %251 %216
OpLine %3 45 9
OpStore %217 %252
OpLine %3 1 1
%253 = OpLoad  %5  %221
OpLine %3 46 13
%254 = OpFMul  %5  %253 %92
OpLine %3 46 9
OpStore %221 %254
OpBranch %242
%242 = OpLabel
OpBranch %236
%236 = OpLabel
OpLine %3 1 1
%255 = OpLoad  %8  %222
OpLine %3 43 43
%256 = OpIAdd  %8  %255 %34
OpLine %3 43 39
OpStore %222 %256
OpBranch %233
%234 = OpLabel
OpLine %3 1 1
%257 = OpLoad  %5  %219
OpReturnValue %257
OpFunctionEnd
%261 = OpFunction  %4  None %262
%259 = OpFunctionParameter  %6
%260 = OpFunctionParameter  %6
%258 = OpLabel
OpBranch %263
%263 = OpLabel
OpLine %3 77 9
%264 = OpCompositeExtract  %5  %259 0
%265 = OpCompositeExtract  %5  %260 0
%266 = OpCompositeExtract  %5  %260 1
OpLine %3 78 49
%267 = OpFunctionCall  %5  %213 %259
OpLine %3 76 12
%268 = OpExtInst  %5  %1 FMix %265 %266 %267
%269 = OpCompositeExtract  %5  %259 1
%270 = OpCompositeConstruct  %4  %264 %268 %269
OpReturnValue %270
OpFunctionEnd
%274 = OpFunction  %14  None %275
%272 = OpFunctionParameter  %6
%273 = OpFunctionParameter  %6
%271 = OpLabel
OpBranch %282
%282 = OpLabel
OpLine %3 84 13
%283 = OpFunctionCall  %4  %261 %272 %273
OpLine %3 86 29
%284 = OpFAdd  %6  %272 %277
OpLine %3 86 15
%285 = OpFunctionCall  %4  %261 %284 %273
OpLine %3 86 15
%286 = OpFSub  %4  %285 %283
OpLine %3 87 29
%287 = OpFAdd  %6  %272 %278
OpLine %3 87 15
%288 = OpFunctionCall  %4  %261 %287 %273
OpLine %3 87 15
%289 = OpFSub  %4  %288 %283
OpLine %3 88 29
%290 = OpFAdd  %6  %272 %280
OpLine %3 88 15
%291 = OpFunctionCall  %4  %261 %290 %273
OpLine %3 88 15
%292 = OpFSub  %4  %291 %283
OpLine %3 89 29
%293 = OpFAdd  %6  %272 %281
OpLine %3 89 15
%294 = OpFunctionCall  %4  %261 %293 %273
OpLine %3 89 15
%295 = OpFSub  %4  %294 %283
OpLine %3 91 14
%296 = OpExtInst  %4  %1 Cross %289 %286
%297 = OpExtInst  %4  %1 Normalize %296
OpLine %3 92 14
%298 = OpExtInst  %4  %1 Cross %295 %292
%299 = OpExtInst  %4  %1 Normalize %298
OpLine %3 94 14
%300 = OpFAdd  %4  %297 %299
OpLine %3 94 13
%301 = OpVectorTimesScalar  %4  %300 %92
OpLine %3 96 12
%302 = OpCompositeConstruct  %14  %283 %301
OpReturnValue %302
OpFunctionEnd
%307 = OpFunction  %6  None %308
%304 = OpFunctionParameter  %8
%305 = OpFunctionParameter  %10
%306 = OpFunctionParameter  %11
%303 = OpLabel
OpBranch %309
%309 = OpLabel
OpLine %3 101 9
%310 = OpConvertUToF  %5  %304
%311 = OpCompositeExtract  %8  %305 0
OpLine %3 101 9
%312 = OpIAdd  %8  %311 %34
%313 = OpConvertUToF  %5  %312
%314 = OpFRem  %5  %310 %313
%315 = OpCompositeExtract  %8  %305 0
OpLine %3 100 12
%316 = OpIAdd  %8  %315 %34
%317 = OpUDiv  %8  %304 %316
%318 = OpConvertUToF  %5  %317
%319 = OpCompositeConstruct  %6  %314 %318
%320 = OpConvertSToF  %6  %306
%321 = OpFAdd  %6  %319 %320
OpReturnValue %321
OpFunctionEnd
%324 = OpFunction  %4  None %325
%323 = OpFunctionParameter  %6
%322 = OpLabel
OpBranch %332
%332 = OpLabel
OpLine %3 270 9
%333 = OpFunctionCall  %5  %78 %323
OpLine %3 270 9
%334 = OpFMul  %5  %333 %92
OpLine %3 270 9
%335 = OpFAdd  %5  %334 %92
OpLine %3 271 17
%336 = OpFAdd  %6  %323 %328
OpLine %3 271 9
%337 = OpFunctionCall  %5  %78 %336
OpLine %3 271 9
%338 = OpFMul  %5  %337 %92
OpLine %3 271 9
%339 = OpFAdd  %5  %338 %92
OpLine %3 272 17
%340 = OpFAdd  %6  %323 %331
OpLine %3 272 9
%341 = OpFunctionCall  %5  %78 %340
OpLine %3 272 9
%342 = OpFMul  %5  %341 %92
OpLine %3 269 12
%343 = OpFAdd  %5  %342 %92
%344 = OpCompositeConstruct  %4  %335 %339 %343
OpReturnValue %344
OpFunctionEnd
%349 = OpFunction  %2  None %350
%345 = OpLabel
%348 = OpLoad  %19  %346
%352 = OpAccessChain  %351  %40 %33
OpBranch %354
%354 = OpLabel
OpLine %3 111 22
%355 = OpCompositeExtract  %8  %348 0
OpLine %3 113 36
%357 = OpAccessChain  %356  %352 %33
%358 = OpLoad  %10  %357
OpLine %3 113 59
%360 = OpAccessChain  %359  %352 %34
%361 = OpLoad  %11  %360
OpLine %3 113 13
%362 = OpFunctionCall  %6  %307 %355 %358 %361
OpLine %3 115 5
OpLine %3 115 51
%366 = OpAccessChain  %365  %352 %35
%367 = OpLoad  %6  %366
OpLine %3 115 33
%368 = OpFunctionCall  %14  %274 %362 %367
OpLine %3 115 5
%369 = OpAccessChain  %364  %43 %33 %355
OpStore %369 %368
OpLine %3 118 23
%370 = OpCompositeExtract  %8  %348 0
OpLine %3 118 23
%371 = OpIMul  %8  %370 %353
OpLine %3 120 25
%373 = OpAccessChain  %372  %352 %33 %33
%374 = OpLoad  %8  %373
OpLine %3 120 25
%375 = OpAccessChain  %372  %352 %33 %34
%376 = OpLoad  %8  %375
%377 = OpIMul  %8  %374 %376
OpLine %3 120 9
%378 = OpIMul  %8  %377 %353
%379 = OpUGreaterThanEqual  %125  %371 %378
OpLine %3 120 5
OpSelectionMerge %380 None
OpBranchConditional %379 %381 %380
%381 = OpLabel
OpReturn
%380 = OpLabel
OpLine %3 122 28
%382 = OpCompositeExtract  %8  %348 0
OpLine %3 122 15
%383 = OpAccessChain  %372  %352 %33 %33
%384 = OpLoad  %8  %383
%385 = OpUDiv  %8  %382 %384
%386 = OpIAdd  %8  %355 %385
OpLine %3 123 15
%387 = OpIAdd  %8  %386 %34
OpLine %3 124 15
%388 = OpAccessChain  %372  %352 %33 %33
%389 = OpLoad  %8  %388
%390 = OpIAdd  %8  %386 %389
OpLine %3 124 15
%391 = OpIAdd  %8  %390 %34
OpLine %3 125 15
%392 = OpIAdd  %8  %391 %34
OpLine %3 127 5
OpLine %3 127 5
%395 = OpAccessChain  %394  %45 %33 %371
OpStore %395 %386
OpLine %3 128 5
OpLine %3 128 5
%396 = OpIAdd  %8  %371 %34
OpLine %3 128 5
%397 = OpAccessChain  %394  %45 %33 %396
OpStore %397 %391
OpLine %3 129 5
OpLine %3 129 5
%398 = OpIAdd  %8  %371 %35
OpLine %3 129 5
%399 = OpAccessChain  %394  %45 %33 %398
OpStore %399 %392
OpLine %3 130 5
OpLine %3 130 5
%400 = OpIAdd  %8  %371 %36
OpLine %3 130 5
%401 = OpAccessChain  %394  %45 %33 %400
OpStore %401 %386
OpLine %3 131 5
OpLine %3 131 5
%402 = OpIAdd  %8  %371 %37
OpLine %3 131 5
%403 = OpAccessChain  %394  %45 %33 %402
OpStore %403 %392
OpLine %3 132 5
OpLine %3 132 5
%404 = OpIAdd  %8  %371 %38
OpLine %3 132 5
%405 = OpAccessChain  %394  %45 %33 %404
OpStore %405 %387
OpReturn
OpFunctionEnd
%416 = OpFunction  %2  None %350
%406 = OpLabel
%409 = OpLoad  %8  %407
%418 = OpAccessChain  %417  %47 %33
OpBranch %421
%421 = OpLabel
OpLine %3 161 19
%422 = OpIAdd  %8  %409 %35
OpLine %3 161 18
%423 = OpUDiv  %8  %422 %36
OpLine %3 161 13
%424 = OpUMod  %8  %423 %35
%425 = OpConvertUToF  %5  %424
OpLine %3 162 19
%426 = OpIAdd  %8  %409 %34
OpLine %3 162 18
%427 = OpUDiv  %8  %426 %36
OpLine %3 162 13
%428 = OpUMod  %8  %427 %35
%429 = OpConvertUToF  %5  %428
OpLine %3 163 14
%430 = OpCompositeConstruct  %6  %425 %429
OpLine %3 165 30
%431 = OpVectorTimesScalar  %6  %430 %95
%432 = OpFAdd  %6  %420 %431
OpLine %3 165 20
%433 = OpCompositeConstruct  %7  %432 %87 %67
OpLine %3 168 21
%435 = OpAccessChain  %434  %418 %36
%436 = OpLoad  %8  %435
%437 = OpConvertUToF  %5  %436
%438 = OpFMul  %5  %425 %437
OpLine %3 168 17
%439 = OpAccessChain  %434  %418 %36
%440 = OpLoad  %8  %439
%441 = OpConvertUToF  %5  %440
%442 = OpFMul  %5  %429 %441
%443 = OpFAdd  %5  %438 %442
%444 = OpConvertFToU  %8  %443
OpLine %3 168 17
%445 = OpAccessChain  %434  %418 %37
%446 = OpLoad  %8  %445
%447 = OpIAdd  %8  %444 %446
OpLine %3 170 12
%448 = OpCompositeConstruct  %21  %447 %433 %430
%449 = OpCompositeExtract  %8  %448 0
OpStore %410 %449
%450 = OpCompositeExtract  %7  %448 1
OpStore %412 %450
%451 = OpCompositeExtract  %6  %448 2
OpStore %414 %451
OpReturn
OpFunctionEnd
%464 = OpFunction  %2  None %350
%452 = OpLabel
%467 = OpVariable  %220  Function %87
%468 = OpVariable  %223  Function %33
%455 = OpLoad  %8  %454
%458 = OpLoad  %7  %456
%461 = OpLoad  %6  %459
%453 = OpCompositeConstruct  %21  %455 %458 %461
%465 = OpAccessChain  %417  %47 %33
OpBranch %469
%469 = OpLabel
OpLine %3 181 17
%470 = OpCompositeExtract  %6  %453 2
%471 = OpCompositeExtract  %5  %470 0
OpLine %3 181 17
%472 = OpAccessChain  %434  %465 %36
%473 = OpLoad  %8  %472
%474 = OpConvertUToF  %5  %473
%475 = OpFMul  %5  %471 %474
%476 = OpCompositeExtract  %6  %453 2
%477 = OpCompositeExtract  %5  %476 1
OpLine %3 181 70
%478 = OpAccessChain  %434  %465 %36
%479 = OpLoad  %8  %478
OpLine %3 181 13
%480 = OpAccessChain  %434  %465 %36
%481 = OpLoad  %8  %480
%482 = OpIMul  %8  %479 %481
%483 = OpConvertUToF  %5  %482
%484 = OpFMul  %5  %477 %483
%485 = OpFAdd  %5  %475 %484
%486 = OpConvertFToU  %8  %485
OpLine %3 181 13
%487 = OpAccessChain  %434  %465 %37
%488 = OpLoad  %8  %487
%489 = OpIAdd  %8  %486 %488
OpLine %3 182 32
%490 = OpConvertUToF  %5  %489
OpLine %3 182 22
%491 = OpFDiv  %5  %490 %466
%492 = OpExtInst  %5  %1 Floor %491
%493 = OpConvertFToU  %8  %492
OpLine %3 183 22
%494 = OpUMod  %8  %489 %353
OpLine %3 185 36
%495 = OpAccessChain  %356  %465 %33
%496 = OpLoad  %10  %495
OpLine %3 185 57
%497 = OpAccessChain  %359  %465 %34
%498 = OpLoad  %11  %497
OpLine %3 185 13
%499 = OpFunctionCall  %6  %307 %493 %496 %498
OpLine %3 186 31
%500 = OpAccessChain  %365  %465 %35
%501 = OpLoad  %6  %500
OpLine %3 186 13
%502 = OpFunctionCall  %14  %274 %499 %501
OpLine %3 190 5
OpSelectionMerge %503 None
OpSwitch %494 %510 0 %504 1 %505 2 %506 3 %507 4 %508 5 %509
%504 = OpLabel
OpLine %3 191 37
%511 = OpCompositeExtract  %4  %502 0
%512 = OpCompositeExtract  %5  %511 0
OpLine %3 191 20
OpStore %467 %512
OpBranch %503
%505 = OpLabel
OpLine %3 192 37
%513 = OpCompositeExtract  %4  %502 0
%514 = OpCompositeExtract  %5  %513 1
OpLine %3 192 20
OpStore %467 %514
OpBranch %503
%506 = OpLabel
OpLine %3 193 37
%515 = OpCompositeExtract  %4  %502 0
%516 = OpCompositeExtract  %5  %515 2
OpLine %3 193 20
OpStore %467 %516
OpBranch %503
%507 = OpLabel
OpLine %3 194 37
%517 = OpCompositeExtract  %4  %502 1
%518 = OpCompositeExtract  %5  %517 0
OpLine %3 194 20
OpStore %467 %518
OpBranch %503
%508 = OpLabel
OpLine %3 195 37
%519 = OpCompositeExtract  %4  %502 1
%520 = OpCompositeExtract  %5  %519 1
OpLine %3 195 20
OpStore %467 %520
OpBranch %503
%509 = OpLabel
OpLine %3 196 37
%521 = OpCompositeExtract  %4  %502 1
%522 = OpCompositeExtract  %5  %521 2
OpLine %3 196 20
OpStore %467 %522
OpBranch %503
%510 = OpLabel
OpBranch %503
%503 = OpLabel
OpLine %3 200 15
%523 = OpAccessChain  %372  %465 %33 %33
%524 = OpLoad  %8  %523
%525 = OpUDiv  %8  %493 %524
%526 = OpIAdd  %8  %493 %525
OpLine %3 201 15
%527 = OpIAdd  %8  %526 %34
OpLine %3 202 15
%528 = OpAccessChain  %372  %465 %33 %33
%529 = OpLoad  %8  %528
%530 = OpIAdd  %8  %526 %529
OpLine %3 202 15
%531 = OpIAdd  %8  %530 %34
OpLine %3 203 15
%532 = OpIAdd  %8  %531 %34
OpLine %3 206 5
OpSelectionMerge %533 None
OpSwitch %494 %538 0 %534 3 %534 2 %535 4 %535 1 %536 5 %537
%534 = OpLabel
OpLine %3 207 24
OpStore %468 %526
OpBranch %533
%535 = OpLabel
OpLine %3 208 24
OpStore %468 %532
OpBranch %533
%536 = OpLabel
OpLine %3 209 20
OpStore %468 %531
OpBranch %533
%537 = OpLabel
OpLine %3 210 20
OpStore %468 %527
OpBranch %533
%538 = OpLabel
OpBranch %533
%533 = OpLabel
OpLine %3 213 13
%539 = OpCompositeExtract  %8  %453 0
OpLine %3 213 5
OpStore %468 %539
OpLine %3 222 27
%540 = OpLoad  %5  %467
%541 = OpBitcast  %8  %540
OpLine %3 223 12
%542 = OpLoad  %8  %468
%543 = OpCompositeConstruct  %22  %541 %542
%544 = OpCompositeExtract  %8  %543 0
OpStore %462 %544
%545 = OpCompositeExtract  %8  %543 1
OpStore %463 %545
OpReturn
OpFunctionEnd
%557 = OpFunction  %2  None %350
%546 = OpLabel
%550 = OpLoad  %4  %548
%552 = OpLoad  %4  %551
%547 = OpCompositeConstruct  %14  %550 %552
%559 = OpAccessChain  %558  %50 %33
OpBranch %560
%560 = OpLabel
OpLine %3 254 25
%562 = OpAccessChain  %561  %559 %34
%563 = OpLoad  %23  %562
%564 = OpCompositeExtract  %4  %547 0
OpLine %3 254 25
%565 = OpCompositeConstruct  %7  %564 %67
%566 = OpMatrixTimesVector  %7  %563 %565
OpLine %3 255 18
%567 = OpCompositeExtract  %4  %547 1
OpLine %3 256 12
%568 = OpCompositeExtract  %4  %547 0
%569 = OpCompositeConstruct  %26  %566 %567 %568
%570 = OpCompositeExtract  %7  %569 0
OpStore %553 %570
%571 = OpCompositeExtract  %4  %569 1
OpStore %554 %571
%572 = OpCompositeExtract  %4  %569 2
OpStore %556 %572
OpReturn
OpFunctionEnd
%582 = OpFunction  %2  None %350
%573 = OpLabel
%591 = OpVariable  %110  Function %592
%576 = OpLoad  %7  %575
%578 = OpLoad  %4  %577
%580 = OpLoad  %4  %579
%574 = OpCompositeConstruct  %26  %576 %578 %580
%583 = OpAccessChain  %558  %50 %33
%585 = OpAccessChain  %584  %53 %33
OpBranch %593
%593 = OpLabel
OpLine %3 278 28
OpLine %3 278 17
%594 = OpCompositeExtract  %4  %574 2
%595 = OpExtInst  %4  %1 Fract %594
%596 = OpExtInst  %4  %1 SmoothStep %94 %586 %595
OpLine %3 278 5
OpStore %591 %596
OpLine %3 279 17
OpLine %3 279 13
%597 = OpAccessChain  %137  %591 %33
%598 = OpLoad  %5  %597
%599 = OpAccessChain  %137  %591 %34
%600 = OpLoad  %5  %599
%601 = OpFMul  %5  %598 %600
%602 = OpAccessChain  %137  %591 %35
%603 = OpLoad  %5  %602
%604 = OpFMul  %5  %601 %603
%605 = OpCompositeConstruct  %4  %604 %604 %604
%606 = OpExtInst  %4  %1 FMix %588 %590 %605
OpLine %3 279 5
OpStore %591 %606
OpLine %3 282 25
%608 = OpAccessChain  %607  %585 %34
%609 = OpLoad  %4  %608
%610 = OpVectorTimesScalar  %4  %609 %276
OpLine %3 284 21
%611 = OpAccessChain  %607  %585 %33
%612 = OpLoad  %4  %611
%613 = OpCompositeExtract  %4  %574 2
%614 = OpFSub  %4  %612 %613
%615 = OpExtInst  %4  %1 Normalize %614
OpLine %3 285 20
%617 = OpAccessChain  %616  %583 %33
%618 = OpLoad  %7  %617
%619 = OpVectorShuffle  %4  %618 %618 0 1 2
%620 = OpCompositeExtract  %4  %574 2
%621 = OpFSub  %4  %619 %620
%622 = OpExtInst  %4  %1 Normalize %621
OpLine %3 286 20
%623 = OpFAdd  %4  %622 %615
%624 = OpExtInst  %4  %1 Normalize %623
OpLine %3 288 32
%625 = OpCompositeExtract  %4  %574 1
%626 = OpDot  %5  %625 %615
OpLine %3 288 28
%627 = OpExtInst  %5  %1 FMax %626 %87
OpLine %3 289 25
%628 = OpAccessChain  %607  %585 %34
%629 = OpLoad  %4  %628
%630 = OpVectorTimesScalar  %4  %629 %627
OpLine %3 291 37
%631 = OpCompositeExtract  %4  %574 1
%632 = OpDot  %5  %631 %624
OpLine %3 291 33
%633 = OpExtInst  %5  %1 FMax %632 %87
OpLine %3 291 29
%634 = OpExtInst  %5  %1 Pow %633 %327
OpLine %3 292 26
%635 = OpAccessChain  %607  %585 %34
%636 = OpLoad  %4  %635
%637 = OpVectorTimesScalar  %4  %636 %634
OpLine %3 294 18
%638 = OpFAdd  %4  %610 %630
%639 = OpFAdd  %4  %638 %637
%640 = OpLoad  %4  %591
%641 = OpFMul  %4  %639 %640
OpLine %3 296 12
%642 = OpCompositeConstruct  %7  %641 %67
OpStore %581 %642
OpReturn
OpFunctionEnd