; SPIR-V
; Version: 1.1
; Generator: rspirv
; Bound: 95
OpCapability Shader
%1 = OpExtInstImport "GLSL.std.450"
OpMemoryModel Logical GLSL450
OpEntryPoint Vertex %26 "vs_main" %17 %20 %22 %24
OpEntryPoint Fragment %59 "fs_main" %53 %56 %58
OpExecutionMode %59 OriginUpperLeft
%3 = OpString "debug-symbol-simple"
OpSource Unknown 0 %3 "struct VertexInput {
    @location(0) position: vec3<f32>,
    @location(1) color: vec3<f32>,
};

struct VertexOutput {
    @builtin(position) clip_position: vec4<f32>,
    @location(0) color: vec3<f32>,
};

@vertex
fn vs_main(
    model: VertexInput,
) -> VertexOutput {
    var out: VertexOutput;
    out.color = model.color;
    out.clip_position = vec4<f32>(model.position, 1.0);
    return out;
}

// Fragment shader

@fragment
fn fs_main(in: VertexOutput) -> @location(0) vec4<f32> {
    var color = in.color;
    for (var i = 0; i < 10; i += 1) {
        var ii = f32(i);
        color.x += ii*0.001;
        color.y += ii*0.002;
    }

    return vec4<f32>(color, 1.0);
}"
OpMemberName %6 0 "position"
OpMemberName %6 1 "color"
OpName %6 "VertexInput"
OpMemberName %8 0 "clip_position"
OpMemberName %8 1 "color"
OpName %8 "VertexOutput"
OpName %12 "out"
OpName %17 "position"
OpName %20 "color"
OpName %22 "clip_position"
OpName %24 "color"
OpName %26 "vs_main"
OpName %43 "color"
OpName %45 "i"
OpName %48 "ii"
OpName %53 "clip_position"
OpName %56 "color"
OpName %59 "fs_main"
OpMemberDecorate %6 0 Offset 0
OpMemberDecorate %6 1 Offset 16
OpMemberDecorate %8 0 Offset 0
OpMemberDecorate %8 1 Offset 16
OpDecorate %17 Location 0
OpDecorate %20 Location 1
OpDecorate %22 BuiltIn Position
OpDecorate %24 Location 0
OpDecorate %53 BuiltIn FragCoord
OpDecorate %56 Location 0
OpDecorate %58 Location 0
%2 = OpTypeVoid
%5 = OpTypeFloat 32
%4 = OpTypeVector %5 3
%6 = OpTypeStruct %4 %4
%7 = OpTypeVector %5 4
%8 = OpTypeStruct %7 %4
%9 = OpTypeInt 32 1
%10 = OpConstant  %9  0
%11 = OpConstant  %9  1
%13 = OpTypePointer Function %8
%14 = OpConstantNull  %8
%18 = OpTypePointer Input %4
%17 = OpVariable  %18  Input
%20 = OpVariable  %18  Input
%23 = OpTypePointer Output %7
%22 = OpVariable  %23  Output
%25 = OpTypePointer Output %4
%24 = OpVariable  %25  Output
%27 = OpTypeFunction %2
%28 = OpConstant  %5  1.0
%30 = OpTypePointer Function %4
%33 = OpTypeInt 32 0
%32 = OpConstant  %33  1
%35 = OpTypePointer Function %7
%38 = OpConstant  %33  0
%44 = OpConstantNull  %4
%46 = OpTypePointer Function %9
%47 = OpConstantNull  %9
%49 = OpTypePointer Function %5
%50 = OpConstantNull  %5
%54 = OpTypePointer Input %7
%53 = OpVariable  %54  Input
%56 = OpVariable  %18  Input
%58 = OpVariable  %23  Output
%60 = OpConstant  %9  10
%61 = OpConstant  %5  0.001
%62 = OpConstant  %5  0.002
%70 = OpTypeBool
%78 = OpTypePointer Function %5
%26 = OpFunction  %2  None %27
%15 = OpLabel
%12 = OpVariable  %13  Function %14
%19 = OpLoad  %4  %17
%21 = OpLoad  %4  %20
%16 = OpCompositeConstruct  %6  %19 %21
OpBranch %29
%29 = OpLabel
OpLine %3 16 5
%31 = OpCompositeExtract  %4  %16 1
OpLine %3 16 5
%34 = OpAccessChain  %30  %12 %32
OpStore %34 %31
OpLine %3 17 5
%36 = OpCompositeExtract  %4  %16 0
OpLine %3 17 25
%37 = OpCompositeConstruct  %7  %36 %28
OpLine %3 17 5
%39 = OpAccessChain  %35  %12 %38
OpStore %39 %37
OpLine %3 1 1
%40 = OpLoad  %8  %12
%41 = OpCompositeExtract  %7  %40 0
OpStore %22 %41
%42 = OpCompositeExtract  %4  %40 1
OpStore %24 %42
OpReturn
OpFunctionEnd
%59 = OpFunction  %2  None %27
%51 = OpLabel
%43 = OpVariable  %30  Function %44
%45 = OpVariable  %46  Function %47
%48 = OpVariable  %49  Function %50
%55 = OpLoad  %7  %53
%57 = OpLoad  %4  %56
%52 = OpCompositeConstruct  %8  %55 %57
OpBranch %63
%63 = OpLabel
OpLine %3 25 17
%64 = OpCompositeExtract  %4  %52 1
OpLine %3 25 5
OpStore %43 %64
OpLine %3 26 10
OpStore %45 %10
OpBranch %65
%65 = OpLabel
OpLine %3 26 5
OpLoopMerge %66 %68 None
OpBranch %67
%67 = OpLabel
OpLine %3 1 1
%69 = OpLoad  %9  %45
OpLine %3 26 21
%71 = OpSLessThan  %70  %69 %60
OpLine %3 26 20
OpSelectionMerge %72 None
OpBranchConditional %71 %72 %73
%73 = OpLabel
OpBranch %66
%72 = OpLabel
OpBranch %74
%74 = OpLabel
OpLine %3 27 18
%76 = OpLoad  %9  %45
%77 = OpConvertSToF  %5  %76
OpLine %3 27 9
OpStore %48 %77
OpLine %3 28 9
%79 = OpLoad  %5  %48
OpLine %3 28 9
%80 = OpFMul  %5  %79 %61
%81 = OpAccessChain  %78  %43 %38
%82 = OpLoad  %5  %81
%83 = OpFAdd  %5  %82 %80
OpLine %3 28 9
%84 = OpAccessChain  %78  %43 %38
OpStore %84 %83
OpLine %3 29 9
%85 = OpLoad  %5  %48
OpLine %3 29 9
%86 = OpFMul  %5  %85 %62
%87 = OpAccessChain  %78  %43 %32
%88 = OpLoad  %5  %87
%89 = OpFAdd  %5  %88 %86
OpLine %3 29 9
%90 = OpAccessChain  %78  %43 %32
OpStore %90 %89
OpBranch %75
%75 = OpLabel
OpBranch %68
%68 = OpLabel
OpLine %3 26 29
%91 = OpLoad  %9  %45
%92 = OpIAdd  %9  %91 %11
OpLine %3 26 29
OpStore %45 %92
OpBranch %65
%66 = OpLabel
OpLine %3 1 1
%93 = OpLoad  %4  %43
OpLine %3 32 12
%94 = OpCompositeConstruct  %7  %93 %28
OpStore %58 %94
OpReturn
OpFunctionEnd